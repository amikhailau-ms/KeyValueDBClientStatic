// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* DBInterface_method_names[] = {
  "/DBInterface/CreateTable",
  "/DBInterface/DeleteTable",
  "/DBInterface/GetFirstEntry",
  "/DBInterface/GetLastEntry",
  "/DBInterface/GetEntry",
  "/DBInterface/GetNextEntry",
  "/DBInterface/GetPrevEntry",
  "/DBInterface/AddEntry",
  "/DBInterface/DeleteCurrentEntry",
};

std::unique_ptr< DBInterface::Stub> DBInterface::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DBInterface::Stub> stub(new DBInterface::Stub(channel));
  return stub;
}

DBInterface::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateTable_(DBInterface_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTable_(DBInterface_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFirstEntry_(DBInterface_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLastEntry_(DBInterface_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEntry_(DBInterface_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNextEntry_(DBInterface_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPrevEntry_(DBInterface_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddEntry_(DBInterface_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCurrentEntry_(DBInterface_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DBInterface::Stub::CreateTable(::grpc::ClientContext* context, const ::CreateTableRequest& request, ::CreateTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateTable_, context, request, response);
}

void DBInterface::Stub::experimental_async::CreateTable(::grpc::ClientContext* context, const ::CreateTableRequest* request, ::CreateTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateTable_, context, request, response, std::move(f));
}

void DBInterface::Stub::experimental_async::CreateTable(::grpc::ClientContext* context, const ::CreateTableRequest* request, ::CreateTableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CreateTableResponse>* DBInterface::Stub::PrepareAsyncCreateTableRaw(::grpc::ClientContext* context, const ::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CreateTableResponse>::Create(channel_.get(), cq, rpcmethod_CreateTable_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::CreateTableResponse>* DBInterface::Stub::AsyncCreateTableRaw(::grpc::ClientContext* context, const ::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBInterface::Stub::DeleteTable(::grpc::ClientContext* context, const ::DeleteTableRequest& request, ::DeleteTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteTable_, context, request, response);
}

void DBInterface::Stub::experimental_async::DeleteTable(::grpc::ClientContext* context, const ::DeleteTableRequest* request, ::DeleteTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteTable_, context, request, response, std::move(f));
}

void DBInterface::Stub::experimental_async::DeleteTable(::grpc::ClientContext* context, const ::DeleteTableRequest* request, ::DeleteTableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DeleteTableResponse>* DBInterface::Stub::PrepareAsyncDeleteTableRaw(::grpc::ClientContext* context, const ::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::DeleteTableResponse>::Create(channel_.get(), cq, rpcmethod_DeleteTable_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::DeleteTableResponse>* DBInterface::Stub::AsyncDeleteTableRaw(::grpc::ClientContext* context, const ::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBInterface::Stub::GetFirstEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::GetSeqEntryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFirstEntry_, context, request, response);
}

void DBInterface::Stub::experimental_async::GetFirstEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFirstEntry_, context, request, response, std::move(f));
}

void DBInterface::Stub::experimental_async::GetFirstEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFirstEntry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetSeqEntryResponse>* DBInterface::Stub::PrepareAsyncGetFirstEntryRaw(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetSeqEntryResponse>::Create(channel_.get(), cq, rpcmethod_GetFirstEntry_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::GetSeqEntryResponse>* DBInterface::Stub::AsyncGetFirstEntryRaw(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFirstEntryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBInterface::Stub::GetLastEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::GetSeqEntryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLastEntry_, context, request, response);
}

void DBInterface::Stub::experimental_async::GetLastEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLastEntry_, context, request, response, std::move(f));
}

void DBInterface::Stub::experimental_async::GetLastEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLastEntry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetSeqEntryResponse>* DBInterface::Stub::PrepareAsyncGetLastEntryRaw(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetSeqEntryResponse>::Create(channel_.get(), cq, rpcmethod_GetLastEntry_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::GetSeqEntryResponse>* DBInterface::Stub::AsyncGetLastEntryRaw(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLastEntryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBInterface::Stub::GetEntry(::grpc::ClientContext* context, const ::GetEntryRequest& request, ::GetEntryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEntry_, context, request, response);
}

void DBInterface::Stub::experimental_async::GetEntry(::grpc::ClientContext* context, const ::GetEntryRequest* request, ::GetEntryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEntry_, context, request, response, std::move(f));
}

void DBInterface::Stub::experimental_async::GetEntry(::grpc::ClientContext* context, const ::GetEntryRequest* request, ::GetEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEntry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetEntryResponse>* DBInterface::Stub::PrepareAsyncGetEntryRaw(::grpc::ClientContext* context, const ::GetEntryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetEntryResponse>::Create(channel_.get(), cq, rpcmethod_GetEntry_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::GetEntryResponse>* DBInterface::Stub::AsyncGetEntryRaw(::grpc::ClientContext* context, const ::GetEntryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEntryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBInterface::Stub::GetNextEntry(::grpc::ClientContext* context, const ::GetNextEntryRequest& request, ::GetNextEntryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNextEntry_, context, request, response);
}

void DBInterface::Stub::experimental_async::GetNextEntry(::grpc::ClientContext* context, const ::GetNextEntryRequest* request, ::GetNextEntryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNextEntry_, context, request, response, std::move(f));
}

void DBInterface::Stub::experimental_async::GetNextEntry(::grpc::ClientContext* context, const ::GetNextEntryRequest* request, ::GetNextEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNextEntry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetNextEntryResponse>* DBInterface::Stub::PrepareAsyncGetNextEntryRaw(::grpc::ClientContext* context, const ::GetNextEntryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetNextEntryResponse>::Create(channel_.get(), cq, rpcmethod_GetNextEntry_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::GetNextEntryResponse>* DBInterface::Stub::AsyncGetNextEntryRaw(::grpc::ClientContext* context, const ::GetNextEntryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNextEntryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBInterface::Stub::GetPrevEntry(::grpc::ClientContext* context, const ::GetPrevEntryRequest& request, ::GetPrevEntryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPrevEntry_, context, request, response);
}

void DBInterface::Stub::experimental_async::GetPrevEntry(::grpc::ClientContext* context, const ::GetPrevEntryRequest* request, ::GetPrevEntryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPrevEntry_, context, request, response, std::move(f));
}

void DBInterface::Stub::experimental_async::GetPrevEntry(::grpc::ClientContext* context, const ::GetPrevEntryRequest* request, ::GetPrevEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPrevEntry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetPrevEntryResponse>* DBInterface::Stub::PrepareAsyncGetPrevEntryRaw(::grpc::ClientContext* context, const ::GetPrevEntryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetPrevEntryResponse>::Create(channel_.get(), cq, rpcmethod_GetPrevEntry_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::GetPrevEntryResponse>* DBInterface::Stub::AsyncGetPrevEntryRaw(::grpc::ClientContext* context, const ::GetPrevEntryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPrevEntryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBInterface::Stub::AddEntry(::grpc::ClientContext* context, const ::AddEntryRequest& request, ::AddEntryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddEntry_, context, request, response);
}

void DBInterface::Stub::experimental_async::AddEntry(::grpc::ClientContext* context, const ::AddEntryRequest* request, ::AddEntryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddEntry_, context, request, response, std::move(f));
}

void DBInterface::Stub::experimental_async::AddEntry(::grpc::ClientContext* context, const ::AddEntryRequest* request, ::AddEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddEntry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AddEntryResponse>* DBInterface::Stub::PrepareAsyncAddEntryRaw(::grpc::ClientContext* context, const ::AddEntryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::AddEntryResponse>::Create(channel_.get(), cq, rpcmethod_AddEntry_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::AddEntryResponse>* DBInterface::Stub::AsyncAddEntryRaw(::grpc::ClientContext* context, const ::AddEntryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddEntryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBInterface::Stub::DeleteCurrentEntry(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest& request, ::DeleteCurrentEntryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteCurrentEntry_, context, request, response);
}

void DBInterface::Stub::experimental_async::DeleteCurrentEntry(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest* request, ::DeleteCurrentEntryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteCurrentEntry_, context, request, response, std::move(f));
}

void DBInterface::Stub::experimental_async::DeleteCurrentEntry(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest* request, ::DeleteCurrentEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteCurrentEntry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DeleteCurrentEntryResponse>* DBInterface::Stub::PrepareAsyncDeleteCurrentEntryRaw(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::DeleteCurrentEntryResponse>::Create(channel_.get(), cq, rpcmethod_DeleteCurrentEntry_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::DeleteCurrentEntryResponse>* DBInterface::Stub::AsyncDeleteCurrentEntryRaw(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteCurrentEntryRaw(context, request, cq);
  result->StartCall();
  return result;
}

DBInterface::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBInterface_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBInterface::Service, ::CreateTableRequest, ::CreateTableResponse>(
          [](DBInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CreateTableRequest* req,
             ::CreateTableResponse* resp) {
               return service->CreateTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBInterface_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBInterface::Service, ::DeleteTableRequest, ::DeleteTableResponse>(
          [](DBInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DeleteTableRequest* req,
             ::DeleteTableResponse* resp) {
               return service->DeleteTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBInterface_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBInterface::Service, ::GetSeqEntryRequest, ::GetSeqEntryResponse>(
          [](DBInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetSeqEntryRequest* req,
             ::GetSeqEntryResponse* resp) {
               return service->GetFirstEntry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBInterface_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBInterface::Service, ::GetSeqEntryRequest, ::GetSeqEntryResponse>(
          [](DBInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetSeqEntryRequest* req,
             ::GetSeqEntryResponse* resp) {
               return service->GetLastEntry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBInterface_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBInterface::Service, ::GetEntryRequest, ::GetEntryResponse>(
          [](DBInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetEntryRequest* req,
             ::GetEntryResponse* resp) {
               return service->GetEntry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBInterface_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBInterface::Service, ::GetNextEntryRequest, ::GetNextEntryResponse>(
          [](DBInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetNextEntryRequest* req,
             ::GetNextEntryResponse* resp) {
               return service->GetNextEntry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBInterface_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBInterface::Service, ::GetPrevEntryRequest, ::GetPrevEntryResponse>(
          [](DBInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetPrevEntryRequest* req,
             ::GetPrevEntryResponse* resp) {
               return service->GetPrevEntry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBInterface_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBInterface::Service, ::AddEntryRequest, ::AddEntryResponse>(
          [](DBInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::AddEntryRequest* req,
             ::AddEntryResponse* resp) {
               return service->AddEntry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBInterface_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBInterface::Service, ::DeleteCurrentEntryRequest, ::DeleteCurrentEntryResponse>(
          [](DBInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DeleteCurrentEntryRequest* req,
             ::DeleteCurrentEntryResponse* resp) {
               return service->DeleteCurrentEntry(ctx, req, resp);
             }, this)));
}

DBInterface::Service::~Service() {
}

::grpc::Status DBInterface::Service::CreateTable(::grpc::ServerContext* context, const ::CreateTableRequest* request, ::CreateTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBInterface::Service::DeleteTable(::grpc::ServerContext* context, const ::DeleteTableRequest* request, ::DeleteTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBInterface::Service::GetFirstEntry(::grpc::ServerContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBInterface::Service::GetLastEntry(::grpc::ServerContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBInterface::Service::GetEntry(::grpc::ServerContext* context, const ::GetEntryRequest* request, ::GetEntryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBInterface::Service::GetNextEntry(::grpc::ServerContext* context, const ::GetNextEntryRequest* request, ::GetNextEntryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBInterface::Service::GetPrevEntry(::grpc::ServerContext* context, const ::GetPrevEntryRequest* request, ::GetPrevEntryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBInterface::Service::AddEntry(::grpc::ServerContext* context, const ::AddEntryRequest* request, ::AddEntryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBInterface::Service::DeleteCurrentEntry(::grpc::ServerContext* context, const ::DeleteCurrentEntryRequest* request, ::DeleteCurrentEntryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


