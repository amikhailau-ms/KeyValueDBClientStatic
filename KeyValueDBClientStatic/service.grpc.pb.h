// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto
#ifndef GRPC_service_2eproto__INCLUDED
#define GRPC_service_2eproto__INCLUDED

#include "service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class DBInterface final {
 public:
  static constexpr char const* service_full_name() {
    return "DBInterface";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateTable(::grpc::ClientContext* context, const ::CreateTableRequest& request, ::CreateTableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateTableResponse>> AsyncCreateTable(::grpc::ClientContext* context, const ::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateTableResponse>>(AsyncCreateTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateTableResponse>> PrepareAsyncCreateTable(::grpc::ClientContext* context, const ::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateTableResponse>>(PrepareAsyncCreateTableRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteTable(::grpc::ClientContext* context, const ::DeleteTableRequest& request, ::DeleteTableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteTableResponse>> AsyncDeleteTable(::grpc::ClientContext* context, const ::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteTableResponse>>(AsyncDeleteTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteTableResponse>> PrepareAsyncDeleteTable(::grpc::ClientContext* context, const ::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteTableResponse>>(PrepareAsyncDeleteTableRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFirstEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::GetSeqEntryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSeqEntryResponse>> AsyncGetFirstEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSeqEntryResponse>>(AsyncGetFirstEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSeqEntryResponse>> PrepareAsyncGetFirstEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSeqEntryResponse>>(PrepareAsyncGetFirstEntryRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLastEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::GetSeqEntryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSeqEntryResponse>> AsyncGetLastEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSeqEntryResponse>>(AsyncGetLastEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSeqEntryResponse>> PrepareAsyncGetLastEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSeqEntryResponse>>(PrepareAsyncGetLastEntryRaw(context, request, cq));
    }
    virtual ::grpc::Status GetEntry(::grpc::ClientContext* context, const ::GetEntryRequest& request, ::GetEntryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetEntryResponse>> AsyncGetEntry(::grpc::ClientContext* context, const ::GetEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetEntryResponse>>(AsyncGetEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetEntryResponse>> PrepareAsyncGetEntry(::grpc::ClientContext* context, const ::GetEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetEntryResponse>>(PrepareAsyncGetEntryRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNextEntry(::grpc::ClientContext* context, const ::GetNextEntryRequest& request, ::GetNextEntryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetNextEntryResponse>> AsyncGetNextEntry(::grpc::ClientContext* context, const ::GetNextEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetNextEntryResponse>>(AsyncGetNextEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetNextEntryResponse>> PrepareAsyncGetNextEntry(::grpc::ClientContext* context, const ::GetNextEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetNextEntryResponse>>(PrepareAsyncGetNextEntryRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPrevEntry(::grpc::ClientContext* context, const ::GetPrevEntryRequest& request, ::GetPrevEntryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetPrevEntryResponse>> AsyncGetPrevEntry(::grpc::ClientContext* context, const ::GetPrevEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetPrevEntryResponse>>(AsyncGetPrevEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetPrevEntryResponse>> PrepareAsyncGetPrevEntry(::grpc::ClientContext* context, const ::GetPrevEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetPrevEntryResponse>>(PrepareAsyncGetPrevEntryRaw(context, request, cq));
    }
    virtual ::grpc::Status AddEntry(::grpc::ClientContext* context, const ::AddEntryRequest& request, ::AddEntryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AddEntryResponse>> AsyncAddEntry(::grpc::ClientContext* context, const ::AddEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AddEntryResponse>>(AsyncAddEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AddEntryResponse>> PrepareAsyncAddEntry(::grpc::ClientContext* context, const ::AddEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AddEntryResponse>>(PrepareAsyncAddEntryRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteCurrentEntry(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest& request, ::DeleteCurrentEntryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteCurrentEntryResponse>> AsyncDeleteCurrentEntry(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteCurrentEntryResponse>>(AsyncDeleteCurrentEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteCurrentEntryResponse>> PrepareAsyncDeleteCurrentEntry(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteCurrentEntryResponse>>(PrepareAsyncDeleteCurrentEntryRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateTable(::grpc::ClientContext* context, const ::CreateTableRequest* request, ::CreateTableResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateTable(::grpc::ClientContext* context, const ::CreateTableRequest* request, ::CreateTableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateTable(::grpc::ClientContext* context, const ::CreateTableRequest* request, ::CreateTableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteTable(::grpc::ClientContext* context, const ::DeleteTableRequest* request, ::DeleteTableResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteTable(::grpc::ClientContext* context, const ::DeleteTableRequest* request, ::DeleteTableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteTable(::grpc::ClientContext* context, const ::DeleteTableRequest* request, ::DeleteTableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetFirstEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetFirstEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetFirstEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetLastEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetLastEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetLastEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetEntry(::grpc::ClientContext* context, const ::GetEntryRequest* request, ::GetEntryResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetEntry(::grpc::ClientContext* context, const ::GetEntryRequest* request, ::GetEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetEntry(::grpc::ClientContext* context, const ::GetEntryRequest* request, ::GetEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetNextEntry(::grpc::ClientContext* context, const ::GetNextEntryRequest* request, ::GetNextEntryResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetNextEntry(::grpc::ClientContext* context, const ::GetNextEntryRequest* request, ::GetNextEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetNextEntry(::grpc::ClientContext* context, const ::GetNextEntryRequest* request, ::GetNextEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetPrevEntry(::grpc::ClientContext* context, const ::GetPrevEntryRequest* request, ::GetPrevEntryResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPrevEntry(::grpc::ClientContext* context, const ::GetPrevEntryRequest* request, ::GetPrevEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPrevEntry(::grpc::ClientContext* context, const ::GetPrevEntryRequest* request, ::GetPrevEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AddEntry(::grpc::ClientContext* context, const ::AddEntryRequest* request, ::AddEntryResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddEntry(::grpc::ClientContext* context, const ::AddEntryRequest* request, ::AddEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddEntry(::grpc::ClientContext* context, const ::AddEntryRequest* request, ::AddEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteCurrentEntry(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest* request, ::DeleteCurrentEntryResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteCurrentEntry(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest* request, ::DeleteCurrentEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteCurrentEntry(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest* request, ::DeleteCurrentEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreateTableResponse>* AsyncCreateTableRaw(::grpc::ClientContext* context, const ::CreateTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreateTableResponse>* PrepareAsyncCreateTableRaw(::grpc::ClientContext* context, const ::CreateTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeleteTableResponse>* AsyncDeleteTableRaw(::grpc::ClientContext* context, const ::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeleteTableResponse>* PrepareAsyncDeleteTableRaw(::grpc::ClientContext* context, const ::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetSeqEntryResponse>* AsyncGetFirstEntryRaw(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetSeqEntryResponse>* PrepareAsyncGetFirstEntryRaw(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetSeqEntryResponse>* AsyncGetLastEntryRaw(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetSeqEntryResponse>* PrepareAsyncGetLastEntryRaw(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetEntryResponse>* AsyncGetEntryRaw(::grpc::ClientContext* context, const ::GetEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetEntryResponse>* PrepareAsyncGetEntryRaw(::grpc::ClientContext* context, const ::GetEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetNextEntryResponse>* AsyncGetNextEntryRaw(::grpc::ClientContext* context, const ::GetNextEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetNextEntryResponse>* PrepareAsyncGetNextEntryRaw(::grpc::ClientContext* context, const ::GetNextEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetPrevEntryResponse>* AsyncGetPrevEntryRaw(::grpc::ClientContext* context, const ::GetPrevEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetPrevEntryResponse>* PrepareAsyncGetPrevEntryRaw(::grpc::ClientContext* context, const ::GetPrevEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AddEntryResponse>* AsyncAddEntryRaw(::grpc::ClientContext* context, const ::AddEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AddEntryResponse>* PrepareAsyncAddEntryRaw(::grpc::ClientContext* context, const ::AddEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeleteCurrentEntryResponse>* AsyncDeleteCurrentEntryRaw(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeleteCurrentEntryResponse>* PrepareAsyncDeleteCurrentEntryRaw(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateTable(::grpc::ClientContext* context, const ::CreateTableRequest& request, ::CreateTableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateTableResponse>> AsyncCreateTable(::grpc::ClientContext* context, const ::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateTableResponse>>(AsyncCreateTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateTableResponse>> PrepareAsyncCreateTable(::grpc::ClientContext* context, const ::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateTableResponse>>(PrepareAsyncCreateTableRaw(context, request, cq));
    }
    ::grpc::Status DeleteTable(::grpc::ClientContext* context, const ::DeleteTableRequest& request, ::DeleteTableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteTableResponse>> AsyncDeleteTable(::grpc::ClientContext* context, const ::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteTableResponse>>(AsyncDeleteTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteTableResponse>> PrepareAsyncDeleteTable(::grpc::ClientContext* context, const ::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteTableResponse>>(PrepareAsyncDeleteTableRaw(context, request, cq));
    }
    ::grpc::Status GetFirstEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::GetSeqEntryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSeqEntryResponse>> AsyncGetFirstEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSeqEntryResponse>>(AsyncGetFirstEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSeqEntryResponse>> PrepareAsyncGetFirstEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSeqEntryResponse>>(PrepareAsyncGetFirstEntryRaw(context, request, cq));
    }
    ::grpc::Status GetLastEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::GetSeqEntryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSeqEntryResponse>> AsyncGetLastEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSeqEntryResponse>>(AsyncGetLastEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSeqEntryResponse>> PrepareAsyncGetLastEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSeqEntryResponse>>(PrepareAsyncGetLastEntryRaw(context, request, cq));
    }
    ::grpc::Status GetEntry(::grpc::ClientContext* context, const ::GetEntryRequest& request, ::GetEntryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetEntryResponse>> AsyncGetEntry(::grpc::ClientContext* context, const ::GetEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetEntryResponse>>(AsyncGetEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetEntryResponse>> PrepareAsyncGetEntry(::grpc::ClientContext* context, const ::GetEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetEntryResponse>>(PrepareAsyncGetEntryRaw(context, request, cq));
    }
    ::grpc::Status GetNextEntry(::grpc::ClientContext* context, const ::GetNextEntryRequest& request, ::GetNextEntryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetNextEntryResponse>> AsyncGetNextEntry(::grpc::ClientContext* context, const ::GetNextEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetNextEntryResponse>>(AsyncGetNextEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetNextEntryResponse>> PrepareAsyncGetNextEntry(::grpc::ClientContext* context, const ::GetNextEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetNextEntryResponse>>(PrepareAsyncGetNextEntryRaw(context, request, cq));
    }
    ::grpc::Status GetPrevEntry(::grpc::ClientContext* context, const ::GetPrevEntryRequest& request, ::GetPrevEntryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetPrevEntryResponse>> AsyncGetPrevEntry(::grpc::ClientContext* context, const ::GetPrevEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetPrevEntryResponse>>(AsyncGetPrevEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetPrevEntryResponse>> PrepareAsyncGetPrevEntry(::grpc::ClientContext* context, const ::GetPrevEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetPrevEntryResponse>>(PrepareAsyncGetPrevEntryRaw(context, request, cq));
    }
    ::grpc::Status AddEntry(::grpc::ClientContext* context, const ::AddEntryRequest& request, ::AddEntryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AddEntryResponse>> AsyncAddEntry(::grpc::ClientContext* context, const ::AddEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AddEntryResponse>>(AsyncAddEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AddEntryResponse>> PrepareAsyncAddEntry(::grpc::ClientContext* context, const ::AddEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AddEntryResponse>>(PrepareAsyncAddEntryRaw(context, request, cq));
    }
    ::grpc::Status DeleteCurrentEntry(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest& request, ::DeleteCurrentEntryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteCurrentEntryResponse>> AsyncDeleteCurrentEntry(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteCurrentEntryResponse>>(AsyncDeleteCurrentEntryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteCurrentEntryResponse>> PrepareAsyncDeleteCurrentEntry(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteCurrentEntryResponse>>(PrepareAsyncDeleteCurrentEntryRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateTable(::grpc::ClientContext* context, const ::CreateTableRequest* request, ::CreateTableResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateTable(::grpc::ClientContext* context, const ::CreateTableRequest* request, ::CreateTableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateTable(::grpc::ClientContext* context, const ::CreateTableRequest* request, ::CreateTableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteTable(::grpc::ClientContext* context, const ::DeleteTableRequest* request, ::DeleteTableResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteTable(::grpc::ClientContext* context, const ::DeleteTableRequest* request, ::DeleteTableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteTable(::grpc::ClientContext* context, const ::DeleteTableRequest* request, ::DeleteTableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetFirstEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetFirstEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetFirstEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetLastEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetLastEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetLastEntry(::grpc::ClientContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetEntry(::grpc::ClientContext* context, const ::GetEntryRequest* request, ::GetEntryResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetEntry(::grpc::ClientContext* context, const ::GetEntryRequest* request, ::GetEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetEntry(::grpc::ClientContext* context, const ::GetEntryRequest* request, ::GetEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetNextEntry(::grpc::ClientContext* context, const ::GetNextEntryRequest* request, ::GetNextEntryResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetNextEntry(::grpc::ClientContext* context, const ::GetNextEntryRequest* request, ::GetNextEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetNextEntry(::grpc::ClientContext* context, const ::GetNextEntryRequest* request, ::GetNextEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPrevEntry(::grpc::ClientContext* context, const ::GetPrevEntryRequest* request, ::GetPrevEntryResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPrevEntry(::grpc::ClientContext* context, const ::GetPrevEntryRequest* request, ::GetPrevEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPrevEntry(::grpc::ClientContext* context, const ::GetPrevEntryRequest* request, ::GetPrevEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddEntry(::grpc::ClientContext* context, const ::AddEntryRequest* request, ::AddEntryResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddEntry(::grpc::ClientContext* context, const ::AddEntryRequest* request, ::AddEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddEntry(::grpc::ClientContext* context, const ::AddEntryRequest* request, ::AddEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteCurrentEntry(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest* request, ::DeleteCurrentEntryResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteCurrentEntry(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest* request, ::DeleteCurrentEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteCurrentEntry(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest* request, ::DeleteCurrentEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::CreateTableResponse>* AsyncCreateTableRaw(::grpc::ClientContext* context, const ::CreateTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CreateTableResponse>* PrepareAsyncCreateTableRaw(::grpc::ClientContext* context, const ::CreateTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DeleteTableResponse>* AsyncDeleteTableRaw(::grpc::ClientContext* context, const ::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DeleteTableResponse>* PrepareAsyncDeleteTableRaw(::grpc::ClientContext* context, const ::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetSeqEntryResponse>* AsyncGetFirstEntryRaw(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetSeqEntryResponse>* PrepareAsyncGetFirstEntryRaw(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetSeqEntryResponse>* AsyncGetLastEntryRaw(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetSeqEntryResponse>* PrepareAsyncGetLastEntryRaw(::grpc::ClientContext* context, const ::GetSeqEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetEntryResponse>* AsyncGetEntryRaw(::grpc::ClientContext* context, const ::GetEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetEntryResponse>* PrepareAsyncGetEntryRaw(::grpc::ClientContext* context, const ::GetEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetNextEntryResponse>* AsyncGetNextEntryRaw(::grpc::ClientContext* context, const ::GetNextEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetNextEntryResponse>* PrepareAsyncGetNextEntryRaw(::grpc::ClientContext* context, const ::GetNextEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetPrevEntryResponse>* AsyncGetPrevEntryRaw(::grpc::ClientContext* context, const ::GetPrevEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetPrevEntryResponse>* PrepareAsyncGetPrevEntryRaw(::grpc::ClientContext* context, const ::GetPrevEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AddEntryResponse>* AsyncAddEntryRaw(::grpc::ClientContext* context, const ::AddEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AddEntryResponse>* PrepareAsyncAddEntryRaw(::grpc::ClientContext* context, const ::AddEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DeleteCurrentEntryResponse>* AsyncDeleteCurrentEntryRaw(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DeleteCurrentEntryResponse>* PrepareAsyncDeleteCurrentEntryRaw(::grpc::ClientContext* context, const ::DeleteCurrentEntryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTable_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteTable_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFirstEntry_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLastEntry_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEntry_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNextEntry_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPrevEntry_;
    const ::grpc::internal::RpcMethod rpcmethod_AddEntry_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCurrentEntry_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateTable(::grpc::ServerContext* context, const ::CreateTableRequest* request, ::CreateTableResponse* response);
    virtual ::grpc::Status DeleteTable(::grpc::ServerContext* context, const ::DeleteTableRequest* request, ::DeleteTableResponse* response);
    virtual ::grpc::Status GetFirstEntry(::grpc::ServerContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response);
    virtual ::grpc::Status GetLastEntry(::grpc::ServerContext* context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response);
    virtual ::grpc::Status GetEntry(::grpc::ServerContext* context, const ::GetEntryRequest* request, ::GetEntryResponse* response);
    virtual ::grpc::Status GetNextEntry(::grpc::ServerContext* context, const ::GetNextEntryRequest* request, ::GetNextEntryResponse* response);
    virtual ::grpc::Status GetPrevEntry(::grpc::ServerContext* context, const ::GetPrevEntryRequest* request, ::GetPrevEntryResponse* response);
    virtual ::grpc::Status AddEntry(::grpc::ServerContext* context, const ::AddEntryRequest* request, ::AddEntryResponse* response);
    virtual ::grpc::Status DeleteCurrentEntry(::grpc::ServerContext* context, const ::DeleteCurrentEntryRequest* request, ::DeleteCurrentEntryResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateTable() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::CreateTableRequest* /*request*/, ::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTable(::grpc::ServerContext* context, ::CreateTableRequest* request, ::grpc::ServerAsyncResponseWriter< ::CreateTableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteTable() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTable(::grpc::ServerContext* /*context*/, const ::DeleteTableRequest* /*request*/, ::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTable(::grpc::ServerContext* context, ::DeleteTableRequest* request, ::grpc::ServerAsyncResponseWriter< ::DeleteTableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFirstEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFirstEntry() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetFirstEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFirstEntry(::grpc::ServerContext* /*context*/, const ::GetSeqEntryRequest* /*request*/, ::GetSeqEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFirstEntry(::grpc::ServerContext* context, ::GetSeqEntryRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetSeqEntryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLastEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLastEntry() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetLastEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastEntry(::grpc::ServerContext* /*context*/, const ::GetSeqEntryRequest* /*request*/, ::GetSeqEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastEntry(::grpc::ServerContext* context, ::GetSeqEntryRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetSeqEntryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEntry() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntry(::grpc::ServerContext* /*context*/, const ::GetEntryRequest* /*request*/, ::GetEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEntry(::grpc::ServerContext* context, ::GetEntryRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetEntryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNextEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNextEntry() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetNextEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextEntry(::grpc::ServerContext* /*context*/, const ::GetNextEntryRequest* /*request*/, ::GetNextEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNextEntry(::grpc::ServerContext* context, ::GetNextEntryRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetNextEntryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPrevEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPrevEntry() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetPrevEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrevEntry(::grpc::ServerContext* /*context*/, const ::GetPrevEntryRequest* /*request*/, ::GetPrevEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPrevEntry(::grpc::ServerContext* context, ::GetPrevEntryRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetPrevEntryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddEntry() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_AddEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEntry(::grpc::ServerContext* /*context*/, const ::AddEntryRequest* /*request*/, ::AddEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddEntry(::grpc::ServerContext* context, ::AddEntryRequest* request, ::grpc::ServerAsyncResponseWriter< ::AddEntryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCurrentEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteCurrentEntry() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DeleteCurrentEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCurrentEntry(::grpc::ServerContext* /*context*/, const ::DeleteCurrentEntryRequest* /*request*/, ::DeleteCurrentEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCurrentEntry(::grpc::ServerContext* context, ::DeleteCurrentEntryRequest* request, ::grpc::ServerAsyncResponseWriter< ::DeleteCurrentEntryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateTable<WithAsyncMethod_DeleteTable<WithAsyncMethod_GetFirstEntry<WithAsyncMethod_GetLastEntry<WithAsyncMethod_GetEntry<WithAsyncMethod_GetNextEntry<WithAsyncMethod_GetPrevEntry<WithAsyncMethod_AddEntry<WithAsyncMethod_DeleteCurrentEntry<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateTable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::CreateTableRequest, ::CreateTableResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::CreateTableRequest* request, ::CreateTableResponse* response) { return this->CreateTable(context, request, response); }));}
    void SetMessageAllocatorFor_CreateTable(
        ::grpc::experimental::MessageAllocator< ::CreateTableRequest, ::CreateTableResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CreateTableRequest, ::CreateTableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::CreateTableRequest* /*request*/, ::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateTable(
      ::grpc::CallbackServerContext* /*context*/, const ::CreateTableRequest* /*request*/, ::CreateTableResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateTable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::CreateTableRequest* /*request*/, ::CreateTableResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteTable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::DeleteTableRequest, ::DeleteTableResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::DeleteTableRequest* request, ::DeleteTableResponse* response) { return this->DeleteTable(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteTable(
        ::grpc::experimental::MessageAllocator< ::DeleteTableRequest, ::DeleteTableResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DeleteTableRequest, ::DeleteTableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTable(::grpc::ServerContext* /*context*/, const ::DeleteTableRequest* /*request*/, ::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteTable(
      ::grpc::CallbackServerContext* /*context*/, const ::DeleteTableRequest* /*request*/, ::DeleteTableResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteTable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::DeleteTableRequest* /*request*/, ::DeleteTableResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetFirstEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetFirstEntry() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::GetSeqEntryRequest, ::GetSeqEntryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response) { return this->GetFirstEntry(context, request, response); }));}
    void SetMessageAllocatorFor_GetFirstEntry(
        ::grpc::experimental::MessageAllocator< ::GetSeqEntryRequest, ::GetSeqEntryResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetSeqEntryRequest, ::GetSeqEntryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetFirstEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFirstEntry(::grpc::ServerContext* /*context*/, const ::GetSeqEntryRequest* /*request*/, ::GetSeqEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetFirstEntry(
      ::grpc::CallbackServerContext* /*context*/, const ::GetSeqEntryRequest* /*request*/, ::GetSeqEntryResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetFirstEntry(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::GetSeqEntryRequest* /*request*/, ::GetSeqEntryResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLastEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLastEntry() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::GetSeqEntryRequest, ::GetSeqEntryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::GetSeqEntryRequest* request, ::GetSeqEntryResponse* response) { return this->GetLastEntry(context, request, response); }));}
    void SetMessageAllocatorFor_GetLastEntry(
        ::grpc::experimental::MessageAllocator< ::GetSeqEntryRequest, ::GetSeqEntryResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetSeqEntryRequest, ::GetSeqEntryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetLastEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastEntry(::grpc::ServerContext* /*context*/, const ::GetSeqEntryRequest* /*request*/, ::GetSeqEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLastEntry(
      ::grpc::CallbackServerContext* /*context*/, const ::GetSeqEntryRequest* /*request*/, ::GetSeqEntryResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLastEntry(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::GetSeqEntryRequest* /*request*/, ::GetSeqEntryResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetEntry() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::GetEntryRequest, ::GetEntryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::GetEntryRequest* request, ::GetEntryResponse* response) { return this->GetEntry(context, request, response); }));}
    void SetMessageAllocatorFor_GetEntry(
        ::grpc::experimental::MessageAllocator< ::GetEntryRequest, ::GetEntryResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetEntryRequest, ::GetEntryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntry(::grpc::ServerContext* /*context*/, const ::GetEntryRequest* /*request*/, ::GetEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetEntry(
      ::grpc::CallbackServerContext* /*context*/, const ::GetEntryRequest* /*request*/, ::GetEntryResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetEntry(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::GetEntryRequest* /*request*/, ::GetEntryResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNextEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetNextEntry() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::GetNextEntryRequest, ::GetNextEntryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::GetNextEntryRequest* request, ::GetNextEntryResponse* response) { return this->GetNextEntry(context, request, response); }));}
    void SetMessageAllocatorFor_GetNextEntry(
        ::grpc::experimental::MessageAllocator< ::GetNextEntryRequest, ::GetNextEntryResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetNextEntryRequest, ::GetNextEntryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNextEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextEntry(::grpc::ServerContext* /*context*/, const ::GetNextEntryRequest* /*request*/, ::GetNextEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNextEntry(
      ::grpc::CallbackServerContext* /*context*/, const ::GetNextEntryRequest* /*request*/, ::GetNextEntryResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNextEntry(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::GetNextEntryRequest* /*request*/, ::GetNextEntryResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPrevEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPrevEntry() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::GetPrevEntryRequest, ::GetPrevEntryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::GetPrevEntryRequest* request, ::GetPrevEntryResponse* response) { return this->GetPrevEntry(context, request, response); }));}
    void SetMessageAllocatorFor_GetPrevEntry(
        ::grpc::experimental::MessageAllocator< ::GetPrevEntryRequest, ::GetPrevEntryResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetPrevEntryRequest, ::GetPrevEntryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPrevEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrevEntry(::grpc::ServerContext* /*context*/, const ::GetPrevEntryRequest* /*request*/, ::GetPrevEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPrevEntry(
      ::grpc::CallbackServerContext* /*context*/, const ::GetPrevEntryRequest* /*request*/, ::GetPrevEntryResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPrevEntry(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::GetPrevEntryRequest* /*request*/, ::GetPrevEntryResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddEntry() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::AddEntryRequest, ::AddEntryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::AddEntryRequest* request, ::AddEntryResponse* response) { return this->AddEntry(context, request, response); }));}
    void SetMessageAllocatorFor_AddEntry(
        ::grpc::experimental::MessageAllocator< ::AddEntryRequest, ::AddEntryResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::AddEntryRequest, ::AddEntryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEntry(::grpc::ServerContext* /*context*/, const ::AddEntryRequest* /*request*/, ::AddEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddEntry(
      ::grpc::CallbackServerContext* /*context*/, const ::AddEntryRequest* /*request*/, ::AddEntryResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddEntry(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::AddEntryRequest* /*request*/, ::AddEntryResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteCurrentEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteCurrentEntry() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::DeleteCurrentEntryRequest, ::DeleteCurrentEntryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::DeleteCurrentEntryRequest* request, ::DeleteCurrentEntryResponse* response) { return this->DeleteCurrentEntry(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteCurrentEntry(
        ::grpc::experimental::MessageAllocator< ::DeleteCurrentEntryRequest, ::DeleteCurrentEntryResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DeleteCurrentEntryRequest, ::DeleteCurrentEntryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteCurrentEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCurrentEntry(::grpc::ServerContext* /*context*/, const ::DeleteCurrentEntryRequest* /*request*/, ::DeleteCurrentEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteCurrentEntry(
      ::grpc::CallbackServerContext* /*context*/, const ::DeleteCurrentEntryRequest* /*request*/, ::DeleteCurrentEntryResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteCurrentEntry(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::DeleteCurrentEntryRequest* /*request*/, ::DeleteCurrentEntryResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateTable<ExperimentalWithCallbackMethod_DeleteTable<ExperimentalWithCallbackMethod_GetFirstEntry<ExperimentalWithCallbackMethod_GetLastEntry<ExperimentalWithCallbackMethod_GetEntry<ExperimentalWithCallbackMethod_GetNextEntry<ExperimentalWithCallbackMethod_GetPrevEntry<ExperimentalWithCallbackMethod_AddEntry<ExperimentalWithCallbackMethod_DeleteCurrentEntry<Service > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateTable<ExperimentalWithCallbackMethod_DeleteTable<ExperimentalWithCallbackMethod_GetFirstEntry<ExperimentalWithCallbackMethod_GetLastEntry<ExperimentalWithCallbackMethod_GetEntry<ExperimentalWithCallbackMethod_GetNextEntry<ExperimentalWithCallbackMethod_GetPrevEntry<ExperimentalWithCallbackMethod_AddEntry<ExperimentalWithCallbackMethod_DeleteCurrentEntry<Service > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateTable() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::CreateTableRequest* /*request*/, ::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteTable() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTable(::grpc::ServerContext* /*context*/, const ::DeleteTableRequest* /*request*/, ::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFirstEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFirstEntry() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetFirstEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFirstEntry(::grpc::ServerContext* /*context*/, const ::GetSeqEntryRequest* /*request*/, ::GetSeqEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLastEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLastEntry() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetLastEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastEntry(::grpc::ServerContext* /*context*/, const ::GetSeqEntryRequest* /*request*/, ::GetSeqEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEntry() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntry(::grpc::ServerContext* /*context*/, const ::GetEntryRequest* /*request*/, ::GetEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNextEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNextEntry() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetNextEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextEntry(::grpc::ServerContext* /*context*/, const ::GetNextEntryRequest* /*request*/, ::GetNextEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPrevEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPrevEntry() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetPrevEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrevEntry(::grpc::ServerContext* /*context*/, const ::GetPrevEntryRequest* /*request*/, ::GetPrevEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddEntry() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_AddEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEntry(::grpc::ServerContext* /*context*/, const ::AddEntryRequest* /*request*/, ::AddEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCurrentEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteCurrentEntry() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DeleteCurrentEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCurrentEntry(::grpc::ServerContext* /*context*/, const ::DeleteCurrentEntryRequest* /*request*/, ::DeleteCurrentEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateTable() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::CreateTableRequest* /*request*/, ::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteTable() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTable(::grpc::ServerContext* /*context*/, const ::DeleteTableRequest* /*request*/, ::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFirstEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFirstEntry() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetFirstEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFirstEntry(::grpc::ServerContext* /*context*/, const ::GetSeqEntryRequest* /*request*/, ::GetSeqEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFirstEntry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLastEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLastEntry() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetLastEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastEntry(::grpc::ServerContext* /*context*/, const ::GetSeqEntryRequest* /*request*/, ::GetSeqEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastEntry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEntry() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntry(::grpc::ServerContext* /*context*/, const ::GetEntryRequest* /*request*/, ::GetEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEntry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNextEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNextEntry() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetNextEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextEntry(::grpc::ServerContext* /*context*/, const ::GetNextEntryRequest* /*request*/, ::GetNextEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNextEntry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPrevEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPrevEntry() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetPrevEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrevEntry(::grpc::ServerContext* /*context*/, const ::GetPrevEntryRequest* /*request*/, ::GetPrevEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPrevEntry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddEntry() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_AddEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEntry(::grpc::ServerContext* /*context*/, const ::AddEntryRequest* /*request*/, ::AddEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddEntry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCurrentEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteCurrentEntry() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DeleteCurrentEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCurrentEntry(::grpc::ServerContext* /*context*/, const ::DeleteCurrentEntryRequest* /*request*/, ::DeleteCurrentEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCurrentEntry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateTable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateTable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::CreateTableRequest* /*request*/, ::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateTable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateTable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteTable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteTable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTable(::grpc::ServerContext* /*context*/, const ::DeleteTableRequest* /*request*/, ::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteTable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteTable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetFirstEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetFirstEntry() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFirstEntry(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetFirstEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFirstEntry(::grpc::ServerContext* /*context*/, const ::GetSeqEntryRequest* /*request*/, ::GetSeqEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetFirstEntry(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetFirstEntry(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLastEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLastEntry() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLastEntry(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLastEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastEntry(::grpc::ServerContext* /*context*/, const ::GetSeqEntryRequest* /*request*/, ::GetSeqEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLastEntry(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLastEntry(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetEntry() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEntry(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntry(::grpc::ServerContext* /*context*/, const ::GetEntryRequest* /*request*/, ::GetEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetEntry(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetEntry(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNextEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNextEntry() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNextEntry(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNextEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextEntry(::grpc::ServerContext* /*context*/, const ::GetNextEntryRequest* /*request*/, ::GetNextEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNextEntry(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNextEntry(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPrevEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPrevEntry() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPrevEntry(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPrevEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrevEntry(::grpc::ServerContext* /*context*/, const ::GetPrevEntryRequest* /*request*/, ::GetPrevEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPrevEntry(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPrevEntry(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddEntry() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddEntry(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEntry(::grpc::ServerContext* /*context*/, const ::AddEntryRequest* /*request*/, ::AddEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddEntry(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddEntry(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteCurrentEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteCurrentEntry() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteCurrentEntry(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteCurrentEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCurrentEntry(::grpc::ServerContext* /*context*/, const ::DeleteCurrentEntryRequest* /*request*/, ::DeleteCurrentEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteCurrentEntry(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteCurrentEntry(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateTable() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CreateTableRequest, ::CreateTableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CreateTableRequest, ::CreateTableResponse>* streamer) {
                       return this->StreamedCreateTable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::CreateTableRequest* /*request*/, ::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CreateTableRequest,::CreateTableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteTable() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DeleteTableRequest, ::DeleteTableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DeleteTableRequest, ::DeleteTableResponse>* streamer) {
                       return this->StreamedDeleteTable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteTable(::grpc::ServerContext* /*context*/, const ::DeleteTableRequest* /*request*/, ::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DeleteTableRequest,::DeleteTableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFirstEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFirstEntry() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetSeqEntryRequest, ::GetSeqEntryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetSeqEntryRequest, ::GetSeqEntryResponse>* streamer) {
                       return this->StreamedGetFirstEntry(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFirstEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFirstEntry(::grpc::ServerContext* /*context*/, const ::GetSeqEntryRequest* /*request*/, ::GetSeqEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFirstEntry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetSeqEntryRequest,::GetSeqEntryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLastEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLastEntry() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetSeqEntryRequest, ::GetSeqEntryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetSeqEntryRequest, ::GetSeqEntryResponse>* streamer) {
                       return this->StreamedGetLastEntry(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLastEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLastEntry(::grpc::ServerContext* /*context*/, const ::GetSeqEntryRequest* /*request*/, ::GetSeqEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLastEntry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetSeqEntryRequest,::GetSeqEntryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEntry() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetEntryRequest, ::GetEntryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetEntryRequest, ::GetEntryResponse>* streamer) {
                       return this->StreamedGetEntry(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEntry(::grpc::ServerContext* /*context*/, const ::GetEntryRequest* /*request*/, ::GetEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEntry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetEntryRequest,::GetEntryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNextEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNextEntry() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetNextEntryRequest, ::GetNextEntryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetNextEntryRequest, ::GetNextEntryResponse>* streamer) {
                       return this->StreamedGetNextEntry(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNextEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNextEntry(::grpc::ServerContext* /*context*/, const ::GetNextEntryRequest* /*request*/, ::GetNextEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNextEntry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetNextEntryRequest,::GetNextEntryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPrevEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPrevEntry() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetPrevEntryRequest, ::GetPrevEntryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetPrevEntryRequest, ::GetPrevEntryResponse>* streamer) {
                       return this->StreamedGetPrevEntry(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPrevEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPrevEntry(::grpc::ServerContext* /*context*/, const ::GetPrevEntryRequest* /*request*/, ::GetPrevEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPrevEntry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetPrevEntryRequest,::GetPrevEntryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddEntry() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::AddEntryRequest, ::AddEntryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::AddEntryRequest, ::AddEntryResponse>* streamer) {
                       return this->StreamedAddEntry(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddEntry(::grpc::ServerContext* /*context*/, const ::AddEntryRequest* /*request*/, ::AddEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddEntry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AddEntryRequest,::AddEntryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCurrentEntry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteCurrentEntry() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DeleteCurrentEntryRequest, ::DeleteCurrentEntryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DeleteCurrentEntryRequest, ::DeleteCurrentEntryResponse>* streamer) {
                       return this->StreamedDeleteCurrentEntry(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteCurrentEntry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCurrentEntry(::grpc::ServerContext* /*context*/, const ::DeleteCurrentEntryRequest* /*request*/, ::DeleteCurrentEntryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCurrentEntry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DeleteCurrentEntryRequest,::DeleteCurrentEntryResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateTable<WithStreamedUnaryMethod_DeleteTable<WithStreamedUnaryMethod_GetFirstEntry<WithStreamedUnaryMethod_GetLastEntry<WithStreamedUnaryMethod_GetEntry<WithStreamedUnaryMethod_GetNextEntry<WithStreamedUnaryMethod_GetPrevEntry<WithStreamedUnaryMethod_AddEntry<WithStreamedUnaryMethod_DeleteCurrentEntry<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateTable<WithStreamedUnaryMethod_DeleteTable<WithStreamedUnaryMethod_GetFirstEntry<WithStreamedUnaryMethod_GetLastEntry<WithStreamedUnaryMethod_GetEntry<WithStreamedUnaryMethod_GetNextEntry<WithStreamedUnaryMethod_GetPrevEntry<WithStreamedUnaryMethod_AddEntry<WithStreamedUnaryMethod_DeleteCurrentEntry<Service > > > > > > > > > StreamedService;
};


#endif  // GRPC_service_2eproto__INCLUDED
