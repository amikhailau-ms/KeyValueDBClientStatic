// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_2eproto;
class AddEntryRequest;
class AddEntryRequestDefaultTypeInternal;
extern AddEntryRequestDefaultTypeInternal _AddEntryRequest_default_instance_;
class AddEntryResponse;
class AddEntryResponseDefaultTypeInternal;
extern AddEntryResponseDefaultTypeInternal _AddEntryResponse_default_instance_;
class CreateTableRequest;
class CreateTableRequestDefaultTypeInternal;
extern CreateTableRequestDefaultTypeInternal _CreateTableRequest_default_instance_;
class CreateTableResponse;
class CreateTableResponseDefaultTypeInternal;
extern CreateTableResponseDefaultTypeInternal _CreateTableResponse_default_instance_;
class DeleteCurrentEntryRequest;
class DeleteCurrentEntryRequestDefaultTypeInternal;
extern DeleteCurrentEntryRequestDefaultTypeInternal _DeleteCurrentEntryRequest_default_instance_;
class DeleteCurrentEntryResponse;
class DeleteCurrentEntryResponseDefaultTypeInternal;
extern DeleteCurrentEntryResponseDefaultTypeInternal _DeleteCurrentEntryResponse_default_instance_;
class DeleteTableRequest;
class DeleteTableRequestDefaultTypeInternal;
extern DeleteTableRequestDefaultTypeInternal _DeleteTableRequest_default_instance_;
class DeleteTableResponse;
class DeleteTableResponseDefaultTypeInternal;
extern DeleteTableResponseDefaultTypeInternal _DeleteTableResponse_default_instance_;
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class GetEntryRequest;
class GetEntryRequestDefaultTypeInternal;
extern GetEntryRequestDefaultTypeInternal _GetEntryRequest_default_instance_;
class GetEntryResponse;
class GetEntryResponseDefaultTypeInternal;
extern GetEntryResponseDefaultTypeInternal _GetEntryResponse_default_instance_;
class GetNextEntryRequest;
class GetNextEntryRequestDefaultTypeInternal;
extern GetNextEntryRequestDefaultTypeInternal _GetNextEntryRequest_default_instance_;
class GetNextEntryResponse;
class GetNextEntryResponseDefaultTypeInternal;
extern GetNextEntryResponseDefaultTypeInternal _GetNextEntryResponse_default_instance_;
class GetPrevEntryRequest;
class GetPrevEntryRequestDefaultTypeInternal;
extern GetPrevEntryRequestDefaultTypeInternal _GetPrevEntryRequest_default_instance_;
class GetPrevEntryResponse;
class GetPrevEntryResponseDefaultTypeInternal;
extern GetPrevEntryResponseDefaultTypeInternal _GetPrevEntryResponse_default_instance_;
class GetSeqEntryRequest;
class GetSeqEntryRequestDefaultTypeInternal;
extern GetSeqEntryRequestDefaultTypeInternal _GetSeqEntryRequest_default_instance_;
class GetSeqEntryResponse;
class GetSeqEntryResponseDefaultTypeInternal;
extern GetSeqEntryResponseDefaultTypeInternal _GetSeqEntryResponse_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class TableHeader;
class TableHeaderDefaultTypeInternal;
extern TableHeaderDefaultTypeInternal _TableHeader_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AddEntryRequest* Arena::CreateMaybeMessage<::AddEntryRequest>(Arena*);
template<> ::AddEntryResponse* Arena::CreateMaybeMessage<::AddEntryResponse>(Arena*);
template<> ::CreateTableRequest* Arena::CreateMaybeMessage<::CreateTableRequest>(Arena*);
template<> ::CreateTableResponse* Arena::CreateMaybeMessage<::CreateTableResponse>(Arena*);
template<> ::DeleteCurrentEntryRequest* Arena::CreateMaybeMessage<::DeleteCurrentEntryRequest>(Arena*);
template<> ::DeleteCurrentEntryResponse* Arena::CreateMaybeMessage<::DeleteCurrentEntryResponse>(Arena*);
template<> ::DeleteTableRequest* Arena::CreateMaybeMessage<::DeleteTableRequest>(Arena*);
template<> ::DeleteTableResponse* Arena::CreateMaybeMessage<::DeleteTableResponse>(Arena*);
template<> ::Entry* Arena::CreateMaybeMessage<::Entry>(Arena*);
template<> ::GetEntryRequest* Arena::CreateMaybeMessage<::GetEntryRequest>(Arena*);
template<> ::GetEntryResponse* Arena::CreateMaybeMessage<::GetEntryResponse>(Arena*);
template<> ::GetNextEntryRequest* Arena::CreateMaybeMessage<::GetNextEntryRequest>(Arena*);
template<> ::GetNextEntryResponse* Arena::CreateMaybeMessage<::GetNextEntryResponse>(Arena*);
template<> ::GetPrevEntryRequest* Arena::CreateMaybeMessage<::GetPrevEntryRequest>(Arena*);
template<> ::GetPrevEntryResponse* Arena::CreateMaybeMessage<::GetPrevEntryResponse>(Arena*);
template<> ::GetSeqEntryRequest* Arena::CreateMaybeMessage<::GetSeqEntryRequest>(Arena*);
template<> ::GetSeqEntryResponse* Arena::CreateMaybeMessage<::GetSeqEntryResponse>(Arena*);
template<> ::KeyValue* Arena::CreateMaybeMessage<::KeyValue>(Arena*);
template<> ::TableHeader* Arena::CreateMaybeMessage<::TableHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Entry) */ {
 public:
  inline Entry() : Entry(nullptr) {}
  virtual ~Entry();

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entry& default_instance();

  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(nullptr);
  }

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Entry";
  }
  protected:
  explicit Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kTableNameFieldNumber = 2,
    kKeyNameFieldNumber = 3,
    kKeyValueFieldNumber = 4,
    kSortFieldNumber = 5,
    kGlobalIndexFieldNumber = 6,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string key_name = 3;
  void clear_key_name();
  const std::string& key_name() const;
  void set_key_name(const std::string& value);
  void set_key_name(std::string&& value);
  void set_key_name(const char* value);
  void set_key_name(const char* value, size_t size);
  std::string* mutable_key_name();
  std::string* release_key_name();
  void set_allocated_key_name(std::string* key_name);
  private:
  const std::string& _internal_key_name() const;
  void _internal_set_key_name(const std::string& value);
  std::string* _internal_mutable_key_name();
  public:

  // string key_value = 4;
  void clear_key_value();
  const std::string& key_value() const;
  void set_key_value(const std::string& value);
  void set_key_value(std::string&& value);
  void set_key_value(const char* value);
  void set_key_value(const char* value, size_t size);
  std::string* mutable_key_value();
  std::string* release_key_value();
  void set_allocated_key_value(std::string* key_value);
  private:
  const std::string& _internal_key_value() const;
  void _internal_set_key_value(const std::string& value);
  std::string* _internal_mutable_key_value();
  public:

  // bool sort = 5;
  void clear_sort();
  bool sort() const;
  void set_sort(bool value);
  private:
  bool _internal_sort() const;
  void _internal_set_sort(bool value);
  public:

  // int32 global_index = 6;
  void clear_global_index();
  ::PROTOBUF_NAMESPACE_ID::int32 global_index() const;
  void set_global_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_global_index() const;
  void _internal_set_global_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_value_;
  bool sort_;
  ::PROTOBUF_NAMESPACE_ID::int32 global_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class TableHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TableHeader) */ {
 public:
  inline TableHeader() : TableHeader(nullptr) {}
  virtual ~TableHeader();

  TableHeader(const TableHeader& from);
  TableHeader(TableHeader&& from) noexcept
    : TableHeader() {
    *this = ::std::move(from);
  }

  inline TableHeader& operator=(const TableHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableHeader& operator=(TableHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableHeader& default_instance();

  static inline const TableHeader* internal_default_instance() {
    return reinterpret_cast<const TableHeader*>(
               &_TableHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TableHeader& a, TableHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(TableHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableHeader* New() const final {
    return CreateMaybeMessage<TableHeader>(nullptr);
  }

  TableHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableHeader& from);
  void MergeFrom(const TableHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TableHeader";
  }
  protected:
  explicit TableHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated string keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:TableHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class KeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {}
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValue& default_instance();

  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const final {
    return CreateMaybeMessage<KeyValue>(nullptr);
  }

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KeyValue";
  }
  protected:
  explicit KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class CreateTableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateTableRequest) */ {
 public:
  inline CreateTableRequest() : CreateTableRequest(nullptr) {}
  virtual ~CreateTableRequest();

  CreateTableRequest(const CreateTableRequest& from);
  CreateTableRequest(CreateTableRequest&& from) noexcept
    : CreateTableRequest() {
    *this = ::std::move(from);
  }

  inline CreateTableRequest& operator=(const CreateTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTableRequest& operator=(CreateTableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTableRequest& default_instance();

  static inline const CreateTableRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTableRequest*>(
               &_CreateTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateTableRequest& a, CreateTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTableRequest* New() const final {
    return CreateMaybeMessage<CreateTableRequest>(nullptr);
  }

  CreateTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTableRequest& from);
  void MergeFrom(const CreateTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateTableRequest";
  }
  protected:
  explicit CreateTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 1,
  };
  // .TableHeader table = 1;
  bool has_table() const;
  private:
  bool _internal_has_table() const;
  public:
  void clear_table();
  const ::TableHeader& table() const;
  ::TableHeader* release_table();
  ::TableHeader* mutable_table();
  void set_allocated_table(::TableHeader* table);
  private:
  const ::TableHeader& _internal_table() const;
  ::TableHeader* _internal_mutable_table();
  public:
  void unsafe_arena_set_allocated_table(
      ::TableHeader* table);
  ::TableHeader* unsafe_arena_release_table();

  // @@protoc_insertion_point(class_scope:CreateTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TableHeader* table_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class CreateTableResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateTableResponse) */ {
 public:
  inline CreateTableResponse() : CreateTableResponse(nullptr) {}
  virtual ~CreateTableResponse();

  CreateTableResponse(const CreateTableResponse& from);
  CreateTableResponse(CreateTableResponse&& from) noexcept
    : CreateTableResponse() {
    *this = ::std::move(from);
  }

  inline CreateTableResponse& operator=(const CreateTableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTableResponse& operator=(CreateTableResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTableResponse& default_instance();

  static inline const CreateTableResponse* internal_default_instance() {
    return reinterpret_cast<const CreateTableResponse*>(
               &_CreateTableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateTableResponse& a, CreateTableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTableResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTableResponse* New() const final {
    return CreateMaybeMessage<CreateTableResponse>(nullptr);
  }

  CreateTableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTableResponse& from);
  void MergeFrom(const CreateTableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateTableResponse";
  }
  protected:
  explicit CreateTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CreateTableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class DeleteTableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteTableRequest) */ {
 public:
  inline DeleteTableRequest() : DeleteTableRequest(nullptr) {}
  virtual ~DeleteTableRequest();

  DeleteTableRequest(const DeleteTableRequest& from);
  DeleteTableRequest(DeleteTableRequest&& from) noexcept
    : DeleteTableRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTableRequest& operator=(const DeleteTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTableRequest& operator=(DeleteTableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteTableRequest& default_instance();

  static inline const DeleteTableRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTableRequest*>(
               &_DeleteTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteTableRequest& a, DeleteTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteTableRequest* New() const final {
    return CreateMaybeMessage<DeleteTableRequest>(nullptr);
  }

  DeleteTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteTableRequest& from);
  void MergeFrom(const DeleteTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteTableRequest";
  }
  protected:
  explicit DeleteTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 1,
  };
  // string table_name = 1;
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // @@protoc_insertion_point(class_scope:DeleteTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class DeleteTableResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteTableResponse) */ {
 public:
  inline DeleteTableResponse() : DeleteTableResponse(nullptr) {}
  virtual ~DeleteTableResponse();

  DeleteTableResponse(const DeleteTableResponse& from);
  DeleteTableResponse(DeleteTableResponse&& from) noexcept
    : DeleteTableResponse() {
    *this = ::std::move(from);
  }

  inline DeleteTableResponse& operator=(const DeleteTableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTableResponse& operator=(DeleteTableResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteTableResponse& default_instance();

  static inline const DeleteTableResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteTableResponse*>(
               &_DeleteTableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteTableResponse& a, DeleteTableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTableResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteTableResponse* New() const final {
    return CreateMaybeMessage<DeleteTableResponse>(nullptr);
  }

  DeleteTableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteTableResponse& from);
  void MergeFrom(const DeleteTableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteTableResponse";
  }
  protected:
  explicit DeleteTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DeleteTableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetSeqEntryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetSeqEntryRequest) */ {
 public:
  inline GetSeqEntryRequest() : GetSeqEntryRequest(nullptr) {}
  virtual ~GetSeqEntryRequest();

  GetSeqEntryRequest(const GetSeqEntryRequest& from);
  GetSeqEntryRequest(GetSeqEntryRequest&& from) noexcept
    : GetSeqEntryRequest() {
    *this = ::std::move(from);
  }

  inline GetSeqEntryRequest& operator=(const GetSeqEntryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSeqEntryRequest& operator=(GetSeqEntryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSeqEntryRequest& default_instance();

  static inline const GetSeqEntryRequest* internal_default_instance() {
    return reinterpret_cast<const GetSeqEntryRequest*>(
               &_GetSeqEntryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetSeqEntryRequest& a, GetSeqEntryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSeqEntryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSeqEntryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSeqEntryRequest* New() const final {
    return CreateMaybeMessage<GetSeqEntryRequest>(nullptr);
  }

  GetSeqEntryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSeqEntryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSeqEntryRequest& from);
  void MergeFrom(const GetSeqEntryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSeqEntryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetSeqEntryRequest";
  }
  protected:
  explicit GetSeqEntryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 1,
    kKeyNameFieldNumber = 2,
    kSortFieldNumber = 3,
  };
  // string table_name = 1;
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string key_name = 2;
  void clear_key_name();
  const std::string& key_name() const;
  void set_key_name(const std::string& value);
  void set_key_name(std::string&& value);
  void set_key_name(const char* value);
  void set_key_name(const char* value, size_t size);
  std::string* mutable_key_name();
  std::string* release_key_name();
  void set_allocated_key_name(std::string* key_name);
  private:
  const std::string& _internal_key_name() const;
  void _internal_set_key_name(const std::string& value);
  std::string* _internal_mutable_key_name();
  public:

  // bool sort = 3;
  void clear_sort();
  bool sort() const;
  void set_sort(bool value);
  private:
  bool _internal_sort() const;
  void _internal_set_sort(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GetSeqEntryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_name_;
  bool sort_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetSeqEntryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetSeqEntryResponse) */ {
 public:
  inline GetSeqEntryResponse() : GetSeqEntryResponse(nullptr) {}
  virtual ~GetSeqEntryResponse();

  GetSeqEntryResponse(const GetSeqEntryResponse& from);
  GetSeqEntryResponse(GetSeqEntryResponse&& from) noexcept
    : GetSeqEntryResponse() {
    *this = ::std::move(from);
  }

  inline GetSeqEntryResponse& operator=(const GetSeqEntryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSeqEntryResponse& operator=(GetSeqEntryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSeqEntryResponse& default_instance();

  static inline const GetSeqEntryResponse* internal_default_instance() {
    return reinterpret_cast<const GetSeqEntryResponse*>(
               &_GetSeqEntryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetSeqEntryResponse& a, GetSeqEntryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSeqEntryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSeqEntryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSeqEntryResponse* New() const final {
    return CreateMaybeMessage<GetSeqEntryResponse>(nullptr);
  }

  GetSeqEntryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSeqEntryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSeqEntryResponse& from);
  void MergeFrom(const GetSeqEntryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSeqEntryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetSeqEntryResponse";
  }
  protected:
  explicit GetSeqEntryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 1,
  };
  // .Entry entry = 1;
  bool has_entry() const;
  private:
  bool _internal_has_entry() const;
  public:
  void clear_entry();
  const ::Entry& entry() const;
  ::Entry* release_entry();
  ::Entry* mutable_entry();
  void set_allocated_entry(::Entry* entry);
  private:
  const ::Entry& _internal_entry() const;
  ::Entry* _internal_mutable_entry();
  public:
  void unsafe_arena_set_allocated_entry(
      ::Entry* entry);
  ::Entry* unsafe_arena_release_entry();

  // @@protoc_insertion_point(class_scope:GetSeqEntryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Entry* entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetEntryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetEntryRequest) */ {
 public:
  inline GetEntryRequest() : GetEntryRequest(nullptr) {}
  virtual ~GetEntryRequest();

  GetEntryRequest(const GetEntryRequest& from);
  GetEntryRequest(GetEntryRequest&& from) noexcept
    : GetEntryRequest() {
    *this = ::std::move(from);
  }

  inline GetEntryRequest& operator=(const GetEntryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntryRequest& operator=(GetEntryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEntryRequest& default_instance();

  static inline const GetEntryRequest* internal_default_instance() {
    return reinterpret_cast<const GetEntryRequest*>(
               &_GetEntryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetEntryRequest& a, GetEntryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEntryRequest* New() const final {
    return CreateMaybeMessage<GetEntryRequest>(nullptr);
  }

  GetEntryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEntryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEntryRequest& from);
  void MergeFrom(const GetEntryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetEntryRequest";
  }
  protected:
  explicit GetEntryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 1,
    kKeyNameFieldNumber = 2,
    kKeyValueFieldNumber = 3,
  };
  // string table_name = 1;
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string key_name = 2;
  void clear_key_name();
  const std::string& key_name() const;
  void set_key_name(const std::string& value);
  void set_key_name(std::string&& value);
  void set_key_name(const char* value);
  void set_key_name(const char* value, size_t size);
  std::string* mutable_key_name();
  std::string* release_key_name();
  void set_allocated_key_name(std::string* key_name);
  private:
  const std::string& _internal_key_name() const;
  void _internal_set_key_name(const std::string& value);
  std::string* _internal_mutable_key_name();
  public:

  // string key_value = 3;
  void clear_key_value();
  const std::string& key_value() const;
  void set_key_value(const std::string& value);
  void set_key_value(std::string&& value);
  void set_key_value(const char* value);
  void set_key_value(const char* value, size_t size);
  std::string* mutable_key_value();
  std::string* release_key_value();
  void set_allocated_key_value(std::string* key_value);
  private:
  const std::string& _internal_key_value() const;
  void _internal_set_key_value(const std::string& value);
  std::string* _internal_mutable_key_value();
  public:

  // @@protoc_insertion_point(class_scope:GetEntryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetEntryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetEntryResponse) */ {
 public:
  inline GetEntryResponse() : GetEntryResponse(nullptr) {}
  virtual ~GetEntryResponse();

  GetEntryResponse(const GetEntryResponse& from);
  GetEntryResponse(GetEntryResponse&& from) noexcept
    : GetEntryResponse() {
    *this = ::std::move(from);
  }

  inline GetEntryResponse& operator=(const GetEntryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntryResponse& operator=(GetEntryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEntryResponse& default_instance();

  static inline const GetEntryResponse* internal_default_instance() {
    return reinterpret_cast<const GetEntryResponse*>(
               &_GetEntryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetEntryResponse& a, GetEntryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEntryResponse* New() const final {
    return CreateMaybeMessage<GetEntryResponse>(nullptr);
  }

  GetEntryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEntryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEntryResponse& from);
  void MergeFrom(const GetEntryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetEntryResponse";
  }
  protected:
  explicit GetEntryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 1,
  };
  // .Entry entry = 1;
  bool has_entry() const;
  private:
  bool _internal_has_entry() const;
  public:
  void clear_entry();
  const ::Entry& entry() const;
  ::Entry* release_entry();
  ::Entry* mutable_entry();
  void set_allocated_entry(::Entry* entry);
  private:
  const ::Entry& _internal_entry() const;
  ::Entry* _internal_mutable_entry();
  public:
  void unsafe_arena_set_allocated_entry(
      ::Entry* entry);
  ::Entry* unsafe_arena_release_entry();

  // @@protoc_insertion_point(class_scope:GetEntryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Entry* entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetNextEntryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetNextEntryRequest) */ {
 public:
  inline GetNextEntryRequest() : GetNextEntryRequest(nullptr) {}
  virtual ~GetNextEntryRequest();

  GetNextEntryRequest(const GetNextEntryRequest& from);
  GetNextEntryRequest(GetNextEntryRequest&& from) noexcept
    : GetNextEntryRequest() {
    *this = ::std::move(from);
  }

  inline GetNextEntryRequest& operator=(const GetNextEntryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNextEntryRequest& operator=(GetNextEntryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNextEntryRequest& default_instance();

  static inline const GetNextEntryRequest* internal_default_instance() {
    return reinterpret_cast<const GetNextEntryRequest*>(
               &_GetNextEntryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetNextEntryRequest& a, GetNextEntryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNextEntryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNextEntryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNextEntryRequest* New() const final {
    return CreateMaybeMessage<GetNextEntryRequest>(nullptr);
  }

  GetNextEntryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNextEntryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNextEntryRequest& from);
  void MergeFrom(const GetNextEntryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNextEntryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetNextEntryRequest";
  }
  protected:
  explicit GetNextEntryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 1,
  };
  // .Entry entry = 1;
  bool has_entry() const;
  private:
  bool _internal_has_entry() const;
  public:
  void clear_entry();
  const ::Entry& entry() const;
  ::Entry* release_entry();
  ::Entry* mutable_entry();
  void set_allocated_entry(::Entry* entry);
  private:
  const ::Entry& _internal_entry() const;
  ::Entry* _internal_mutable_entry();
  public:
  void unsafe_arena_set_allocated_entry(
      ::Entry* entry);
  ::Entry* unsafe_arena_release_entry();

  // @@protoc_insertion_point(class_scope:GetNextEntryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Entry* entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetNextEntryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetNextEntryResponse) */ {
 public:
  inline GetNextEntryResponse() : GetNextEntryResponse(nullptr) {}
  virtual ~GetNextEntryResponse();

  GetNextEntryResponse(const GetNextEntryResponse& from);
  GetNextEntryResponse(GetNextEntryResponse&& from) noexcept
    : GetNextEntryResponse() {
    *this = ::std::move(from);
  }

  inline GetNextEntryResponse& operator=(const GetNextEntryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNextEntryResponse& operator=(GetNextEntryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNextEntryResponse& default_instance();

  static inline const GetNextEntryResponse* internal_default_instance() {
    return reinterpret_cast<const GetNextEntryResponse*>(
               &_GetNextEntryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetNextEntryResponse& a, GetNextEntryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNextEntryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNextEntryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNextEntryResponse* New() const final {
    return CreateMaybeMessage<GetNextEntryResponse>(nullptr);
  }

  GetNextEntryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNextEntryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNextEntryResponse& from);
  void MergeFrom(const GetNextEntryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNextEntryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetNextEntryResponse";
  }
  protected:
  explicit GetNextEntryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextEntryFieldNumber = 1,
  };
  // .Entry next_entry = 1;
  bool has_next_entry() const;
  private:
  bool _internal_has_next_entry() const;
  public:
  void clear_next_entry();
  const ::Entry& next_entry() const;
  ::Entry* release_next_entry();
  ::Entry* mutable_next_entry();
  void set_allocated_next_entry(::Entry* next_entry);
  private:
  const ::Entry& _internal_next_entry() const;
  ::Entry* _internal_mutable_next_entry();
  public:
  void unsafe_arena_set_allocated_next_entry(
      ::Entry* next_entry);
  ::Entry* unsafe_arena_release_next_entry();

  // @@protoc_insertion_point(class_scope:GetNextEntryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Entry* next_entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetPrevEntryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetPrevEntryRequest) */ {
 public:
  inline GetPrevEntryRequest() : GetPrevEntryRequest(nullptr) {}
  virtual ~GetPrevEntryRequest();

  GetPrevEntryRequest(const GetPrevEntryRequest& from);
  GetPrevEntryRequest(GetPrevEntryRequest&& from) noexcept
    : GetPrevEntryRequest() {
    *this = ::std::move(from);
  }

  inline GetPrevEntryRequest& operator=(const GetPrevEntryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPrevEntryRequest& operator=(GetPrevEntryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPrevEntryRequest& default_instance();

  static inline const GetPrevEntryRequest* internal_default_instance() {
    return reinterpret_cast<const GetPrevEntryRequest*>(
               &_GetPrevEntryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetPrevEntryRequest& a, GetPrevEntryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPrevEntryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPrevEntryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPrevEntryRequest* New() const final {
    return CreateMaybeMessage<GetPrevEntryRequest>(nullptr);
  }

  GetPrevEntryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPrevEntryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPrevEntryRequest& from);
  void MergeFrom(const GetPrevEntryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPrevEntryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetPrevEntryRequest";
  }
  protected:
  explicit GetPrevEntryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 1,
  };
  // .Entry entry = 1;
  bool has_entry() const;
  private:
  bool _internal_has_entry() const;
  public:
  void clear_entry();
  const ::Entry& entry() const;
  ::Entry* release_entry();
  ::Entry* mutable_entry();
  void set_allocated_entry(::Entry* entry);
  private:
  const ::Entry& _internal_entry() const;
  ::Entry* _internal_mutable_entry();
  public:
  void unsafe_arena_set_allocated_entry(
      ::Entry* entry);
  ::Entry* unsafe_arena_release_entry();

  // @@protoc_insertion_point(class_scope:GetPrevEntryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Entry* entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetPrevEntryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetPrevEntryResponse) */ {
 public:
  inline GetPrevEntryResponse() : GetPrevEntryResponse(nullptr) {}
  virtual ~GetPrevEntryResponse();

  GetPrevEntryResponse(const GetPrevEntryResponse& from);
  GetPrevEntryResponse(GetPrevEntryResponse&& from) noexcept
    : GetPrevEntryResponse() {
    *this = ::std::move(from);
  }

  inline GetPrevEntryResponse& operator=(const GetPrevEntryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPrevEntryResponse& operator=(GetPrevEntryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPrevEntryResponse& default_instance();

  static inline const GetPrevEntryResponse* internal_default_instance() {
    return reinterpret_cast<const GetPrevEntryResponse*>(
               &_GetPrevEntryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetPrevEntryResponse& a, GetPrevEntryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPrevEntryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPrevEntryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPrevEntryResponse* New() const final {
    return CreateMaybeMessage<GetPrevEntryResponse>(nullptr);
  }

  GetPrevEntryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPrevEntryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPrevEntryResponse& from);
  void MergeFrom(const GetPrevEntryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPrevEntryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetPrevEntryResponse";
  }
  protected:
  explicit GetPrevEntryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrevEntryFieldNumber = 1,
  };
  // .Entry prev_entry = 1;
  bool has_prev_entry() const;
  private:
  bool _internal_has_prev_entry() const;
  public:
  void clear_prev_entry();
  const ::Entry& prev_entry() const;
  ::Entry* release_prev_entry();
  ::Entry* mutable_prev_entry();
  void set_allocated_prev_entry(::Entry* prev_entry);
  private:
  const ::Entry& _internal_prev_entry() const;
  ::Entry* _internal_mutable_prev_entry();
  public:
  void unsafe_arena_set_allocated_prev_entry(
      ::Entry* prev_entry);
  ::Entry* unsafe_arena_release_prev_entry();

  // @@protoc_insertion_point(class_scope:GetPrevEntryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Entry* prev_entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class AddEntryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddEntryRequest) */ {
 public:
  inline AddEntryRequest() : AddEntryRequest(nullptr) {}
  virtual ~AddEntryRequest();

  AddEntryRequest(const AddEntryRequest& from);
  AddEntryRequest(AddEntryRequest&& from) noexcept
    : AddEntryRequest() {
    *this = ::std::move(from);
  }

  inline AddEntryRequest& operator=(const AddEntryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddEntryRequest& operator=(AddEntryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddEntryRequest& default_instance();

  static inline const AddEntryRequest* internal_default_instance() {
    return reinterpret_cast<const AddEntryRequest*>(
               &_AddEntryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AddEntryRequest& a, AddEntryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddEntryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddEntryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddEntryRequest* New() const final {
    return CreateMaybeMessage<AddEntryRequest>(nullptr);
  }

  AddEntryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddEntryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddEntryRequest& from);
  void MergeFrom(const AddEntryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddEntryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddEntryRequest";
  }
  protected:
  explicit AddEntryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kTableNameFieldNumber = 1,
    kValueFieldNumber = 3,
  };
  // repeated .KeyValue keys = 2;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::KeyValue* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyValue >*
      mutable_keys();
  private:
  const ::KeyValue& _internal_keys(int index) const;
  ::KeyValue* _internal_add_keys();
  public:
  const ::KeyValue& keys(int index) const;
  ::KeyValue* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyValue >&
      keys() const;

  // string table_name = 1;
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:AddEntryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyValue > keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class AddEntryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddEntryResponse) */ {
 public:
  inline AddEntryResponse() : AddEntryResponse(nullptr) {}
  virtual ~AddEntryResponse();

  AddEntryResponse(const AddEntryResponse& from);
  AddEntryResponse(AddEntryResponse&& from) noexcept
    : AddEntryResponse() {
    *this = ::std::move(from);
  }

  inline AddEntryResponse& operator=(const AddEntryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddEntryResponse& operator=(AddEntryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddEntryResponse& default_instance();

  static inline const AddEntryResponse* internal_default_instance() {
    return reinterpret_cast<const AddEntryResponse*>(
               &_AddEntryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AddEntryResponse& a, AddEntryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddEntryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddEntryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddEntryResponse* New() const final {
    return CreateMaybeMessage<AddEntryResponse>(nullptr);
  }

  AddEntryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddEntryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddEntryResponse& from);
  void MergeFrom(const AddEntryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddEntryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddEntryResponse";
  }
  protected:
  explicit AddEntryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AddEntryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class DeleteCurrentEntryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteCurrentEntryRequest) */ {
 public:
  inline DeleteCurrentEntryRequest() : DeleteCurrentEntryRequest(nullptr) {}
  virtual ~DeleteCurrentEntryRequest();

  DeleteCurrentEntryRequest(const DeleteCurrentEntryRequest& from);
  DeleteCurrentEntryRequest(DeleteCurrentEntryRequest&& from) noexcept
    : DeleteCurrentEntryRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCurrentEntryRequest& operator=(const DeleteCurrentEntryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCurrentEntryRequest& operator=(DeleteCurrentEntryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteCurrentEntryRequest& default_instance();

  static inline const DeleteCurrentEntryRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCurrentEntryRequest*>(
               &_DeleteCurrentEntryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DeleteCurrentEntryRequest& a, DeleteCurrentEntryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCurrentEntryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCurrentEntryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteCurrentEntryRequest* New() const final {
    return CreateMaybeMessage<DeleteCurrentEntryRequest>(nullptr);
  }

  DeleteCurrentEntryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteCurrentEntryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteCurrentEntryRequest& from);
  void MergeFrom(const DeleteCurrentEntryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCurrentEntryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteCurrentEntryRequest";
  }
  protected:
  explicit DeleteCurrentEntryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 1,
  };
  // .Entry entry = 1;
  bool has_entry() const;
  private:
  bool _internal_has_entry() const;
  public:
  void clear_entry();
  const ::Entry& entry() const;
  ::Entry* release_entry();
  ::Entry* mutable_entry();
  void set_allocated_entry(::Entry* entry);
  private:
  const ::Entry& _internal_entry() const;
  ::Entry* _internal_mutable_entry();
  public:
  void unsafe_arena_set_allocated_entry(
      ::Entry* entry);
  ::Entry* unsafe_arena_release_entry();

  // @@protoc_insertion_point(class_scope:DeleteCurrentEntryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Entry* entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class DeleteCurrentEntryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteCurrentEntryResponse) */ {
 public:
  inline DeleteCurrentEntryResponse() : DeleteCurrentEntryResponse(nullptr) {}
  virtual ~DeleteCurrentEntryResponse();

  DeleteCurrentEntryResponse(const DeleteCurrentEntryResponse& from);
  DeleteCurrentEntryResponse(DeleteCurrentEntryResponse&& from) noexcept
    : DeleteCurrentEntryResponse() {
    *this = ::std::move(from);
  }

  inline DeleteCurrentEntryResponse& operator=(const DeleteCurrentEntryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCurrentEntryResponse& operator=(DeleteCurrentEntryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteCurrentEntryResponse& default_instance();

  static inline const DeleteCurrentEntryResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteCurrentEntryResponse*>(
               &_DeleteCurrentEntryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DeleteCurrentEntryResponse& a, DeleteCurrentEntryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCurrentEntryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCurrentEntryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteCurrentEntryResponse* New() const final {
    return CreateMaybeMessage<DeleteCurrentEntryResponse>(nullptr);
  }

  DeleteCurrentEntryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteCurrentEntryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteCurrentEntryResponse& from);
  void MergeFrom(const DeleteCurrentEntryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCurrentEntryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteCurrentEntryResponse";
  }
  protected:
  explicit DeleteCurrentEntryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2eproto);
    return ::descriptor_table_service_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DeleteCurrentEntryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entry

// string value = 1;
inline void Entry::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Entry::value() const {
  // @@protoc_insertion_point(field_get:Entry.value)
  return _internal_value();
}
inline void Entry::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Entry.value)
}
inline std::string* Entry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Entry.value)
  return _internal_mutable_value();
}
inline const std::string& Entry::_internal_value() const {
  return value_.Get();
}
inline void Entry::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Entry::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Entry.value)
}
inline void Entry::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Entry.value)
}
inline void Entry::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Entry.value)
}
inline std::string* Entry::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Entry::release_value() {
  // @@protoc_insertion_point(field_release:Entry.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Entry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Entry.value)
}

// string table_name = 2;
inline void Entry::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& Entry::table_name() const {
  // @@protoc_insertion_point(field_get:Entry.table_name)
  return _internal_table_name();
}
inline void Entry::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:Entry.table_name)
}
inline std::string* Entry::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:Entry.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& Entry::_internal_table_name() const {
  return table_name_.Get();
}
inline void Entry::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Entry::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Entry.table_name)
}
inline void Entry::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Entry.table_name)
}
inline void Entry::set_table_name(const char* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Entry.table_name)
}
inline std::string* Entry::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Entry::release_table_name() {
  // @@protoc_insertion_point(field_release:Entry.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Entry::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Entry.table_name)
}

// string key_name = 3;
inline void Entry::clear_key_name() {
  key_name_.ClearToEmpty();
}
inline const std::string& Entry::key_name() const {
  // @@protoc_insertion_point(field_get:Entry.key_name)
  return _internal_key_name();
}
inline void Entry::set_key_name(const std::string& value) {
  _internal_set_key_name(value);
  // @@protoc_insertion_point(field_set:Entry.key_name)
}
inline std::string* Entry::mutable_key_name() {
  // @@protoc_insertion_point(field_mutable:Entry.key_name)
  return _internal_mutable_key_name();
}
inline const std::string& Entry::_internal_key_name() const {
  return key_name_.Get();
}
inline void Entry::_internal_set_key_name(const std::string& value) {
  
  key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Entry::set_key_name(std::string&& value) {
  
  key_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Entry.key_name)
}
inline void Entry::set_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Entry.key_name)
}
inline void Entry::set_key_name(const char* value,
    size_t size) {
  
  key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Entry.key_name)
}
inline std::string* Entry::_internal_mutable_key_name() {
  
  return key_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Entry::release_key_name() {
  // @@protoc_insertion_point(field_release:Entry.key_name)
  return key_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Entry::set_allocated_key_name(std::string* key_name) {
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Entry.key_name)
}

// string key_value = 4;
inline void Entry::clear_key_value() {
  key_value_.ClearToEmpty();
}
inline const std::string& Entry::key_value() const {
  // @@protoc_insertion_point(field_get:Entry.key_value)
  return _internal_key_value();
}
inline void Entry::set_key_value(const std::string& value) {
  _internal_set_key_value(value);
  // @@protoc_insertion_point(field_set:Entry.key_value)
}
inline std::string* Entry::mutable_key_value() {
  // @@protoc_insertion_point(field_mutable:Entry.key_value)
  return _internal_mutable_key_value();
}
inline const std::string& Entry::_internal_key_value() const {
  return key_value_.Get();
}
inline void Entry::_internal_set_key_value(const std::string& value) {
  
  key_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Entry::set_key_value(std::string&& value) {
  
  key_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Entry.key_value)
}
inline void Entry::set_key_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Entry.key_value)
}
inline void Entry::set_key_value(const char* value,
    size_t size) {
  
  key_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Entry.key_value)
}
inline std::string* Entry::_internal_mutable_key_value() {
  
  return key_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Entry::release_key_value() {
  // @@protoc_insertion_point(field_release:Entry.key_value)
  return key_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Entry::set_allocated_key_value(std::string* key_value) {
  if (key_value != nullptr) {
    
  } else {
    
  }
  key_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Entry.key_value)
}

// bool sort = 5;
inline void Entry::clear_sort() {
  sort_ = false;
}
inline bool Entry::_internal_sort() const {
  return sort_;
}
inline bool Entry::sort() const {
  // @@protoc_insertion_point(field_get:Entry.sort)
  return _internal_sort();
}
inline void Entry::_internal_set_sort(bool value) {
  
  sort_ = value;
}
inline void Entry::set_sort(bool value) {
  _internal_set_sort(value);
  // @@protoc_insertion_point(field_set:Entry.sort)
}

// int32 global_index = 6;
inline void Entry::clear_global_index() {
  global_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Entry::_internal_global_index() const {
  return global_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Entry::global_index() const {
  // @@protoc_insertion_point(field_get:Entry.global_index)
  return _internal_global_index();
}
inline void Entry::_internal_set_global_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  global_index_ = value;
}
inline void Entry::set_global_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_global_index(value);
  // @@protoc_insertion_point(field_set:Entry.global_index)
}

// -------------------------------------------------------------------

// TableHeader

// repeated string keys = 1;
inline int TableHeader::_internal_keys_size() const {
  return keys_.size();
}
inline int TableHeader::keys_size() const {
  return _internal_keys_size();
}
inline void TableHeader::clear_keys() {
  keys_.Clear();
}
inline std::string* TableHeader::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:TableHeader.keys)
  return _internal_add_keys();
}
inline const std::string& TableHeader::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const std::string& TableHeader::keys(int index) const {
  // @@protoc_insertion_point(field_get:TableHeader.keys)
  return _internal_keys(index);
}
inline std::string* TableHeader::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:TableHeader.keys)
  return keys_.Mutable(index);
}
inline void TableHeader::set_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TableHeader.keys)
  keys_.Mutable(index)->assign(value);
}
inline void TableHeader::set_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TableHeader.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
inline void TableHeader::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TableHeader.keys)
}
inline void TableHeader::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TableHeader.keys)
}
inline std::string* TableHeader::_internal_add_keys() {
  return keys_.Add();
}
inline void TableHeader::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TableHeader.keys)
}
inline void TableHeader::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TableHeader.keys)
}
inline void TableHeader::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TableHeader.keys)
}
inline void TableHeader::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TableHeader.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TableHeader::keys() const {
  // @@protoc_insertion_point(field_list:TableHeader.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TableHeader::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:TableHeader.keys)
  return &keys_;
}

// string name = 2;
inline void TableHeader::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TableHeader::name() const {
  // @@protoc_insertion_point(field_get:TableHeader.name)
  return _internal_name();
}
inline void TableHeader::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:TableHeader.name)
}
inline std::string* TableHeader::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TableHeader.name)
  return _internal_mutable_name();
}
inline const std::string& TableHeader::_internal_name() const {
  return name_.Get();
}
inline void TableHeader::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TableHeader::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TableHeader.name)
}
inline void TableHeader::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TableHeader.name)
}
inline void TableHeader::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TableHeader.name)
}
inline std::string* TableHeader::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TableHeader::release_name() {
  // @@protoc_insertion_point(field_release:TableHeader.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TableHeader::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TableHeader.name)
}

// -------------------------------------------------------------------

// KeyValue

// string name = 1;
inline void KeyValue::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& KeyValue::name() const {
  // @@protoc_insertion_point(field_get:KeyValue.name)
  return _internal_name();
}
inline void KeyValue::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:KeyValue.name)
}
inline std::string* KeyValue::mutable_name() {
  // @@protoc_insertion_point(field_mutable:KeyValue.name)
  return _internal_mutable_name();
}
inline const std::string& KeyValue::_internal_name() const {
  return name_.Get();
}
inline void KeyValue::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyValue::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KeyValue.name)
}
inline void KeyValue::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KeyValue.name)
}
inline void KeyValue::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KeyValue.name)
}
inline std::string* KeyValue::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyValue::release_name() {
  // @@protoc_insertion_point(field_release:KeyValue.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KeyValue.name)
}

// string value = 2;
inline void KeyValue::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:KeyValue.value)
  return _internal_value();
}
inline void KeyValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:KeyValue.value)
}
inline std::string* KeyValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:KeyValue.value)
  return _internal_mutable_value();
}
inline const std::string& KeyValue::_internal_value() const {
  return value_.Get();
}
inline void KeyValue::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyValue::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KeyValue.value)
}
inline void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KeyValue.value)
}
inline void KeyValue::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KeyValue.value)
}
inline std::string* KeyValue::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:KeyValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KeyValue.value)
}

// -------------------------------------------------------------------

// CreateTableRequest

// .TableHeader table = 1;
inline bool CreateTableRequest::_internal_has_table() const {
  return this != internal_default_instance() && table_ != nullptr;
}
inline bool CreateTableRequest::has_table() const {
  return _internal_has_table();
}
inline void CreateTableRequest::clear_table() {
  if (GetArena() == nullptr && table_ != nullptr) {
    delete table_;
  }
  table_ = nullptr;
}
inline const ::TableHeader& CreateTableRequest::_internal_table() const {
  const ::TableHeader* p = table_;
  return p != nullptr ? *p : reinterpret_cast<const ::TableHeader&>(
      ::_TableHeader_default_instance_);
}
inline const ::TableHeader& CreateTableRequest::table() const {
  // @@protoc_insertion_point(field_get:CreateTableRequest.table)
  return _internal_table();
}
inline void CreateTableRequest::unsafe_arena_set_allocated_table(
    ::TableHeader* table) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_);
  }
  table_ = table;
  if (table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CreateTableRequest.table)
}
inline ::TableHeader* CreateTableRequest::release_table() {
  
  ::TableHeader* temp = table_;
  table_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TableHeader* CreateTableRequest::unsafe_arena_release_table() {
  // @@protoc_insertion_point(field_release:CreateTableRequest.table)
  
  ::TableHeader* temp = table_;
  table_ = nullptr;
  return temp;
}
inline ::TableHeader* CreateTableRequest::_internal_mutable_table() {
  
  if (table_ == nullptr) {
    auto* p = CreateMaybeMessage<::TableHeader>(GetArena());
    table_ = p;
  }
  return table_;
}
inline ::TableHeader* CreateTableRequest::mutable_table() {
  // @@protoc_insertion_point(field_mutable:CreateTableRequest.table)
  return _internal_mutable_table();
}
inline void CreateTableRequest::set_allocated_table(::TableHeader* table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_;
  }
  if (table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table);
    if (message_arena != submessage_arena) {
      table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    
  } else {
    
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:CreateTableRequest.table)
}

// -------------------------------------------------------------------

// CreateTableResponse

// -------------------------------------------------------------------

// DeleteTableRequest

// string table_name = 1;
inline void DeleteTableRequest::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& DeleteTableRequest::table_name() const {
  // @@protoc_insertion_point(field_get:DeleteTableRequest.table_name)
  return _internal_table_name();
}
inline void DeleteTableRequest::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:DeleteTableRequest.table_name)
}
inline std::string* DeleteTableRequest::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:DeleteTableRequest.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& DeleteTableRequest::_internal_table_name() const {
  return table_name_.Get();
}
inline void DeleteTableRequest::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteTableRequest::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DeleteTableRequest.table_name)
}
inline void DeleteTableRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DeleteTableRequest.table_name)
}
inline void DeleteTableRequest::set_table_name(const char* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DeleteTableRequest.table_name)
}
inline std::string* DeleteTableRequest::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteTableRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:DeleteTableRequest.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteTableRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DeleteTableRequest.table_name)
}

// -------------------------------------------------------------------

// DeleteTableResponse

// -------------------------------------------------------------------

// GetSeqEntryRequest

// string table_name = 1;
inline void GetSeqEntryRequest::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& GetSeqEntryRequest::table_name() const {
  // @@protoc_insertion_point(field_get:GetSeqEntryRequest.table_name)
  return _internal_table_name();
}
inline void GetSeqEntryRequest::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:GetSeqEntryRequest.table_name)
}
inline std::string* GetSeqEntryRequest::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:GetSeqEntryRequest.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& GetSeqEntryRequest::_internal_table_name() const {
  return table_name_.Get();
}
inline void GetSeqEntryRequest::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSeqEntryRequest::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetSeqEntryRequest.table_name)
}
inline void GetSeqEntryRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GetSeqEntryRequest.table_name)
}
inline void GetSeqEntryRequest::set_table_name(const char* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetSeqEntryRequest.table_name)
}
inline std::string* GetSeqEntryRequest::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSeqEntryRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:GetSeqEntryRequest.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSeqEntryRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetSeqEntryRequest.table_name)
}

// string key_name = 2;
inline void GetSeqEntryRequest::clear_key_name() {
  key_name_.ClearToEmpty();
}
inline const std::string& GetSeqEntryRequest::key_name() const {
  // @@protoc_insertion_point(field_get:GetSeqEntryRequest.key_name)
  return _internal_key_name();
}
inline void GetSeqEntryRequest::set_key_name(const std::string& value) {
  _internal_set_key_name(value);
  // @@protoc_insertion_point(field_set:GetSeqEntryRequest.key_name)
}
inline std::string* GetSeqEntryRequest::mutable_key_name() {
  // @@protoc_insertion_point(field_mutable:GetSeqEntryRequest.key_name)
  return _internal_mutable_key_name();
}
inline const std::string& GetSeqEntryRequest::_internal_key_name() const {
  return key_name_.Get();
}
inline void GetSeqEntryRequest::_internal_set_key_name(const std::string& value) {
  
  key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSeqEntryRequest::set_key_name(std::string&& value) {
  
  key_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetSeqEntryRequest.key_name)
}
inline void GetSeqEntryRequest::set_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GetSeqEntryRequest.key_name)
}
inline void GetSeqEntryRequest::set_key_name(const char* value,
    size_t size) {
  
  key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetSeqEntryRequest.key_name)
}
inline std::string* GetSeqEntryRequest::_internal_mutable_key_name() {
  
  return key_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSeqEntryRequest::release_key_name() {
  // @@protoc_insertion_point(field_release:GetSeqEntryRequest.key_name)
  return key_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSeqEntryRequest::set_allocated_key_name(std::string* key_name) {
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetSeqEntryRequest.key_name)
}

// bool sort = 3;
inline void GetSeqEntryRequest::clear_sort() {
  sort_ = false;
}
inline bool GetSeqEntryRequest::_internal_sort() const {
  return sort_;
}
inline bool GetSeqEntryRequest::sort() const {
  // @@protoc_insertion_point(field_get:GetSeqEntryRequest.sort)
  return _internal_sort();
}
inline void GetSeqEntryRequest::_internal_set_sort(bool value) {
  
  sort_ = value;
}
inline void GetSeqEntryRequest::set_sort(bool value) {
  _internal_set_sort(value);
  // @@protoc_insertion_point(field_set:GetSeqEntryRequest.sort)
}

// -------------------------------------------------------------------

// GetSeqEntryResponse

// .Entry entry = 1;
inline bool GetSeqEntryResponse::_internal_has_entry() const {
  return this != internal_default_instance() && entry_ != nullptr;
}
inline bool GetSeqEntryResponse::has_entry() const {
  return _internal_has_entry();
}
inline void GetSeqEntryResponse::clear_entry() {
  if (GetArena() == nullptr && entry_ != nullptr) {
    delete entry_;
  }
  entry_ = nullptr;
}
inline const ::Entry& GetSeqEntryResponse::_internal_entry() const {
  const ::Entry* p = entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::Entry&>(
      ::_Entry_default_instance_);
}
inline const ::Entry& GetSeqEntryResponse::entry() const {
  // @@protoc_insertion_point(field_get:GetSeqEntryResponse.entry)
  return _internal_entry();
}
inline void GetSeqEntryResponse::unsafe_arena_set_allocated_entry(
    ::Entry* entry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entry_);
  }
  entry_ = entry;
  if (entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetSeqEntryResponse.entry)
}
inline ::Entry* GetSeqEntryResponse::release_entry() {
  
  ::Entry* temp = entry_;
  entry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Entry* GetSeqEntryResponse::unsafe_arena_release_entry() {
  // @@protoc_insertion_point(field_release:GetSeqEntryResponse.entry)
  
  ::Entry* temp = entry_;
  entry_ = nullptr;
  return temp;
}
inline ::Entry* GetSeqEntryResponse::_internal_mutable_entry() {
  
  if (entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::Entry>(GetArena());
    entry_ = p;
  }
  return entry_;
}
inline ::Entry* GetSeqEntryResponse::mutable_entry() {
  // @@protoc_insertion_point(field_mutable:GetSeqEntryResponse.entry)
  return _internal_mutable_entry();
}
inline void GetSeqEntryResponse::set_allocated_entry(::Entry* entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete entry_;
  }
  if (entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entry);
    if (message_arena != submessage_arena) {
      entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entry, submessage_arena);
    }
    
  } else {
    
  }
  entry_ = entry;
  // @@protoc_insertion_point(field_set_allocated:GetSeqEntryResponse.entry)
}

// -------------------------------------------------------------------

// GetEntryRequest

// string table_name = 1;
inline void GetEntryRequest::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& GetEntryRequest::table_name() const {
  // @@protoc_insertion_point(field_get:GetEntryRequest.table_name)
  return _internal_table_name();
}
inline void GetEntryRequest::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:GetEntryRequest.table_name)
}
inline std::string* GetEntryRequest::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:GetEntryRequest.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& GetEntryRequest::_internal_table_name() const {
  return table_name_.Get();
}
inline void GetEntryRequest::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetEntryRequest::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetEntryRequest.table_name)
}
inline void GetEntryRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GetEntryRequest.table_name)
}
inline void GetEntryRequest::set_table_name(const char* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetEntryRequest.table_name)
}
inline std::string* GetEntryRequest::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetEntryRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:GetEntryRequest.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEntryRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetEntryRequest.table_name)
}

// string key_name = 2;
inline void GetEntryRequest::clear_key_name() {
  key_name_.ClearToEmpty();
}
inline const std::string& GetEntryRequest::key_name() const {
  // @@protoc_insertion_point(field_get:GetEntryRequest.key_name)
  return _internal_key_name();
}
inline void GetEntryRequest::set_key_name(const std::string& value) {
  _internal_set_key_name(value);
  // @@protoc_insertion_point(field_set:GetEntryRequest.key_name)
}
inline std::string* GetEntryRequest::mutable_key_name() {
  // @@protoc_insertion_point(field_mutable:GetEntryRequest.key_name)
  return _internal_mutable_key_name();
}
inline const std::string& GetEntryRequest::_internal_key_name() const {
  return key_name_.Get();
}
inline void GetEntryRequest::_internal_set_key_name(const std::string& value) {
  
  key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetEntryRequest::set_key_name(std::string&& value) {
  
  key_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetEntryRequest.key_name)
}
inline void GetEntryRequest::set_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GetEntryRequest.key_name)
}
inline void GetEntryRequest::set_key_name(const char* value,
    size_t size) {
  
  key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetEntryRequest.key_name)
}
inline std::string* GetEntryRequest::_internal_mutable_key_name() {
  
  return key_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetEntryRequest::release_key_name() {
  // @@protoc_insertion_point(field_release:GetEntryRequest.key_name)
  return key_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEntryRequest::set_allocated_key_name(std::string* key_name) {
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetEntryRequest.key_name)
}

// string key_value = 3;
inline void GetEntryRequest::clear_key_value() {
  key_value_.ClearToEmpty();
}
inline const std::string& GetEntryRequest::key_value() const {
  // @@protoc_insertion_point(field_get:GetEntryRequest.key_value)
  return _internal_key_value();
}
inline void GetEntryRequest::set_key_value(const std::string& value) {
  _internal_set_key_value(value);
  // @@protoc_insertion_point(field_set:GetEntryRequest.key_value)
}
inline std::string* GetEntryRequest::mutable_key_value() {
  // @@protoc_insertion_point(field_mutable:GetEntryRequest.key_value)
  return _internal_mutable_key_value();
}
inline const std::string& GetEntryRequest::_internal_key_value() const {
  return key_value_.Get();
}
inline void GetEntryRequest::_internal_set_key_value(const std::string& value) {
  
  key_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetEntryRequest::set_key_value(std::string&& value) {
  
  key_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetEntryRequest.key_value)
}
inline void GetEntryRequest::set_key_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GetEntryRequest.key_value)
}
inline void GetEntryRequest::set_key_value(const char* value,
    size_t size) {
  
  key_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetEntryRequest.key_value)
}
inline std::string* GetEntryRequest::_internal_mutable_key_value() {
  
  return key_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetEntryRequest::release_key_value() {
  // @@protoc_insertion_point(field_release:GetEntryRequest.key_value)
  return key_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEntryRequest::set_allocated_key_value(std::string* key_value) {
  if (key_value != nullptr) {
    
  } else {
    
  }
  key_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetEntryRequest.key_value)
}

// -------------------------------------------------------------------

// GetEntryResponse

// .Entry entry = 1;
inline bool GetEntryResponse::_internal_has_entry() const {
  return this != internal_default_instance() && entry_ != nullptr;
}
inline bool GetEntryResponse::has_entry() const {
  return _internal_has_entry();
}
inline void GetEntryResponse::clear_entry() {
  if (GetArena() == nullptr && entry_ != nullptr) {
    delete entry_;
  }
  entry_ = nullptr;
}
inline const ::Entry& GetEntryResponse::_internal_entry() const {
  const ::Entry* p = entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::Entry&>(
      ::_Entry_default_instance_);
}
inline const ::Entry& GetEntryResponse::entry() const {
  // @@protoc_insertion_point(field_get:GetEntryResponse.entry)
  return _internal_entry();
}
inline void GetEntryResponse::unsafe_arena_set_allocated_entry(
    ::Entry* entry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entry_);
  }
  entry_ = entry;
  if (entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetEntryResponse.entry)
}
inline ::Entry* GetEntryResponse::release_entry() {
  
  ::Entry* temp = entry_;
  entry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Entry* GetEntryResponse::unsafe_arena_release_entry() {
  // @@protoc_insertion_point(field_release:GetEntryResponse.entry)
  
  ::Entry* temp = entry_;
  entry_ = nullptr;
  return temp;
}
inline ::Entry* GetEntryResponse::_internal_mutable_entry() {
  
  if (entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::Entry>(GetArena());
    entry_ = p;
  }
  return entry_;
}
inline ::Entry* GetEntryResponse::mutable_entry() {
  // @@protoc_insertion_point(field_mutable:GetEntryResponse.entry)
  return _internal_mutable_entry();
}
inline void GetEntryResponse::set_allocated_entry(::Entry* entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete entry_;
  }
  if (entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entry);
    if (message_arena != submessage_arena) {
      entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entry, submessage_arena);
    }
    
  } else {
    
  }
  entry_ = entry;
  // @@protoc_insertion_point(field_set_allocated:GetEntryResponse.entry)
}

// -------------------------------------------------------------------

// GetNextEntryRequest

// .Entry entry = 1;
inline bool GetNextEntryRequest::_internal_has_entry() const {
  return this != internal_default_instance() && entry_ != nullptr;
}
inline bool GetNextEntryRequest::has_entry() const {
  return _internal_has_entry();
}
inline void GetNextEntryRequest::clear_entry() {
  if (GetArena() == nullptr && entry_ != nullptr) {
    delete entry_;
  }
  entry_ = nullptr;
}
inline const ::Entry& GetNextEntryRequest::_internal_entry() const {
  const ::Entry* p = entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::Entry&>(
      ::_Entry_default_instance_);
}
inline const ::Entry& GetNextEntryRequest::entry() const {
  // @@protoc_insertion_point(field_get:GetNextEntryRequest.entry)
  return _internal_entry();
}
inline void GetNextEntryRequest::unsafe_arena_set_allocated_entry(
    ::Entry* entry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entry_);
  }
  entry_ = entry;
  if (entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetNextEntryRequest.entry)
}
inline ::Entry* GetNextEntryRequest::release_entry() {
  
  ::Entry* temp = entry_;
  entry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Entry* GetNextEntryRequest::unsafe_arena_release_entry() {
  // @@protoc_insertion_point(field_release:GetNextEntryRequest.entry)
  
  ::Entry* temp = entry_;
  entry_ = nullptr;
  return temp;
}
inline ::Entry* GetNextEntryRequest::_internal_mutable_entry() {
  
  if (entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::Entry>(GetArena());
    entry_ = p;
  }
  return entry_;
}
inline ::Entry* GetNextEntryRequest::mutable_entry() {
  // @@protoc_insertion_point(field_mutable:GetNextEntryRequest.entry)
  return _internal_mutable_entry();
}
inline void GetNextEntryRequest::set_allocated_entry(::Entry* entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete entry_;
  }
  if (entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entry);
    if (message_arena != submessage_arena) {
      entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entry, submessage_arena);
    }
    
  } else {
    
  }
  entry_ = entry;
  // @@protoc_insertion_point(field_set_allocated:GetNextEntryRequest.entry)
}

// -------------------------------------------------------------------

// GetNextEntryResponse

// .Entry next_entry = 1;
inline bool GetNextEntryResponse::_internal_has_next_entry() const {
  return this != internal_default_instance() && next_entry_ != nullptr;
}
inline bool GetNextEntryResponse::has_next_entry() const {
  return _internal_has_next_entry();
}
inline void GetNextEntryResponse::clear_next_entry() {
  if (GetArena() == nullptr && next_entry_ != nullptr) {
    delete next_entry_;
  }
  next_entry_ = nullptr;
}
inline const ::Entry& GetNextEntryResponse::_internal_next_entry() const {
  const ::Entry* p = next_entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::Entry&>(
      ::_Entry_default_instance_);
}
inline const ::Entry& GetNextEntryResponse::next_entry() const {
  // @@protoc_insertion_point(field_get:GetNextEntryResponse.next_entry)
  return _internal_next_entry();
}
inline void GetNextEntryResponse::unsafe_arena_set_allocated_next_entry(
    ::Entry* next_entry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_entry_);
  }
  next_entry_ = next_entry;
  if (next_entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetNextEntryResponse.next_entry)
}
inline ::Entry* GetNextEntryResponse::release_next_entry() {
  
  ::Entry* temp = next_entry_;
  next_entry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Entry* GetNextEntryResponse::unsafe_arena_release_next_entry() {
  // @@protoc_insertion_point(field_release:GetNextEntryResponse.next_entry)
  
  ::Entry* temp = next_entry_;
  next_entry_ = nullptr;
  return temp;
}
inline ::Entry* GetNextEntryResponse::_internal_mutable_next_entry() {
  
  if (next_entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::Entry>(GetArena());
    next_entry_ = p;
  }
  return next_entry_;
}
inline ::Entry* GetNextEntryResponse::mutable_next_entry() {
  // @@protoc_insertion_point(field_mutable:GetNextEntryResponse.next_entry)
  return _internal_mutable_next_entry();
}
inline void GetNextEntryResponse::set_allocated_next_entry(::Entry* next_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete next_entry_;
  }
  if (next_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(next_entry);
    if (message_arena != submessage_arena) {
      next_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_entry, submessage_arena);
    }
    
  } else {
    
  }
  next_entry_ = next_entry;
  // @@protoc_insertion_point(field_set_allocated:GetNextEntryResponse.next_entry)
}

// -------------------------------------------------------------------

// GetPrevEntryRequest

// .Entry entry = 1;
inline bool GetPrevEntryRequest::_internal_has_entry() const {
  return this != internal_default_instance() && entry_ != nullptr;
}
inline bool GetPrevEntryRequest::has_entry() const {
  return _internal_has_entry();
}
inline void GetPrevEntryRequest::clear_entry() {
  if (GetArena() == nullptr && entry_ != nullptr) {
    delete entry_;
  }
  entry_ = nullptr;
}
inline const ::Entry& GetPrevEntryRequest::_internal_entry() const {
  const ::Entry* p = entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::Entry&>(
      ::_Entry_default_instance_);
}
inline const ::Entry& GetPrevEntryRequest::entry() const {
  // @@protoc_insertion_point(field_get:GetPrevEntryRequest.entry)
  return _internal_entry();
}
inline void GetPrevEntryRequest::unsafe_arena_set_allocated_entry(
    ::Entry* entry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entry_);
  }
  entry_ = entry;
  if (entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetPrevEntryRequest.entry)
}
inline ::Entry* GetPrevEntryRequest::release_entry() {
  
  ::Entry* temp = entry_;
  entry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Entry* GetPrevEntryRequest::unsafe_arena_release_entry() {
  // @@protoc_insertion_point(field_release:GetPrevEntryRequest.entry)
  
  ::Entry* temp = entry_;
  entry_ = nullptr;
  return temp;
}
inline ::Entry* GetPrevEntryRequest::_internal_mutable_entry() {
  
  if (entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::Entry>(GetArena());
    entry_ = p;
  }
  return entry_;
}
inline ::Entry* GetPrevEntryRequest::mutable_entry() {
  // @@protoc_insertion_point(field_mutable:GetPrevEntryRequest.entry)
  return _internal_mutable_entry();
}
inline void GetPrevEntryRequest::set_allocated_entry(::Entry* entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete entry_;
  }
  if (entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entry);
    if (message_arena != submessage_arena) {
      entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entry, submessage_arena);
    }
    
  } else {
    
  }
  entry_ = entry;
  // @@protoc_insertion_point(field_set_allocated:GetPrevEntryRequest.entry)
}

// -------------------------------------------------------------------

// GetPrevEntryResponse

// .Entry prev_entry = 1;
inline bool GetPrevEntryResponse::_internal_has_prev_entry() const {
  return this != internal_default_instance() && prev_entry_ != nullptr;
}
inline bool GetPrevEntryResponse::has_prev_entry() const {
  return _internal_has_prev_entry();
}
inline void GetPrevEntryResponse::clear_prev_entry() {
  if (GetArena() == nullptr && prev_entry_ != nullptr) {
    delete prev_entry_;
  }
  prev_entry_ = nullptr;
}
inline const ::Entry& GetPrevEntryResponse::_internal_prev_entry() const {
  const ::Entry* p = prev_entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::Entry&>(
      ::_Entry_default_instance_);
}
inline const ::Entry& GetPrevEntryResponse::prev_entry() const {
  // @@protoc_insertion_point(field_get:GetPrevEntryResponse.prev_entry)
  return _internal_prev_entry();
}
inline void GetPrevEntryResponse::unsafe_arena_set_allocated_prev_entry(
    ::Entry* prev_entry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prev_entry_);
  }
  prev_entry_ = prev_entry;
  if (prev_entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetPrevEntryResponse.prev_entry)
}
inline ::Entry* GetPrevEntryResponse::release_prev_entry() {
  
  ::Entry* temp = prev_entry_;
  prev_entry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Entry* GetPrevEntryResponse::unsafe_arena_release_prev_entry() {
  // @@protoc_insertion_point(field_release:GetPrevEntryResponse.prev_entry)
  
  ::Entry* temp = prev_entry_;
  prev_entry_ = nullptr;
  return temp;
}
inline ::Entry* GetPrevEntryResponse::_internal_mutable_prev_entry() {
  
  if (prev_entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::Entry>(GetArena());
    prev_entry_ = p;
  }
  return prev_entry_;
}
inline ::Entry* GetPrevEntryResponse::mutable_prev_entry() {
  // @@protoc_insertion_point(field_mutable:GetPrevEntryResponse.prev_entry)
  return _internal_mutable_prev_entry();
}
inline void GetPrevEntryResponse::set_allocated_prev_entry(::Entry* prev_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete prev_entry_;
  }
  if (prev_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prev_entry);
    if (message_arena != submessage_arena) {
      prev_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prev_entry, submessage_arena);
    }
    
  } else {
    
  }
  prev_entry_ = prev_entry;
  // @@protoc_insertion_point(field_set_allocated:GetPrevEntryResponse.prev_entry)
}

// -------------------------------------------------------------------

// AddEntryRequest

// string table_name = 1;
inline void AddEntryRequest::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& AddEntryRequest::table_name() const {
  // @@protoc_insertion_point(field_get:AddEntryRequest.table_name)
  return _internal_table_name();
}
inline void AddEntryRequest::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:AddEntryRequest.table_name)
}
inline std::string* AddEntryRequest::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:AddEntryRequest.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& AddEntryRequest::_internal_table_name() const {
  return table_name_.Get();
}
inline void AddEntryRequest::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddEntryRequest::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AddEntryRequest.table_name)
}
inline void AddEntryRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AddEntryRequest.table_name)
}
inline void AddEntryRequest::set_table_name(const char* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AddEntryRequest.table_name)
}
inline std::string* AddEntryRequest::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddEntryRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:AddEntryRequest.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddEntryRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AddEntryRequest.table_name)
}

// repeated .KeyValue keys = 2;
inline int AddEntryRequest::_internal_keys_size() const {
  return keys_.size();
}
inline int AddEntryRequest::keys_size() const {
  return _internal_keys_size();
}
inline void AddEntryRequest::clear_keys() {
  keys_.Clear();
}
inline ::KeyValue* AddEntryRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:AddEntryRequest.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyValue >*
AddEntryRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:AddEntryRequest.keys)
  return &keys_;
}
inline const ::KeyValue& AddEntryRequest::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::KeyValue& AddEntryRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:AddEntryRequest.keys)
  return _internal_keys(index);
}
inline ::KeyValue* AddEntryRequest::_internal_add_keys() {
  return keys_.Add();
}
inline ::KeyValue* AddEntryRequest::add_keys() {
  // @@protoc_insertion_point(field_add:AddEntryRequest.keys)
  return _internal_add_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyValue >&
AddEntryRequest::keys() const {
  // @@protoc_insertion_point(field_list:AddEntryRequest.keys)
  return keys_;
}

// string value = 3;
inline void AddEntryRequest::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& AddEntryRequest::value() const {
  // @@protoc_insertion_point(field_get:AddEntryRequest.value)
  return _internal_value();
}
inline void AddEntryRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:AddEntryRequest.value)
}
inline std::string* AddEntryRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:AddEntryRequest.value)
  return _internal_mutable_value();
}
inline const std::string& AddEntryRequest::_internal_value() const {
  return value_.Get();
}
inline void AddEntryRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddEntryRequest::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AddEntryRequest.value)
}
inline void AddEntryRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AddEntryRequest.value)
}
inline void AddEntryRequest::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AddEntryRequest.value)
}
inline std::string* AddEntryRequest::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddEntryRequest::release_value() {
  // @@protoc_insertion_point(field_release:AddEntryRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddEntryRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AddEntryRequest.value)
}

// -------------------------------------------------------------------

// AddEntryResponse

// -------------------------------------------------------------------

// DeleteCurrentEntryRequest

// .Entry entry = 1;
inline bool DeleteCurrentEntryRequest::_internal_has_entry() const {
  return this != internal_default_instance() && entry_ != nullptr;
}
inline bool DeleteCurrentEntryRequest::has_entry() const {
  return _internal_has_entry();
}
inline void DeleteCurrentEntryRequest::clear_entry() {
  if (GetArena() == nullptr && entry_ != nullptr) {
    delete entry_;
  }
  entry_ = nullptr;
}
inline const ::Entry& DeleteCurrentEntryRequest::_internal_entry() const {
  const ::Entry* p = entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::Entry&>(
      ::_Entry_default_instance_);
}
inline const ::Entry& DeleteCurrentEntryRequest::entry() const {
  // @@protoc_insertion_point(field_get:DeleteCurrentEntryRequest.entry)
  return _internal_entry();
}
inline void DeleteCurrentEntryRequest::unsafe_arena_set_allocated_entry(
    ::Entry* entry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entry_);
  }
  entry_ = entry;
  if (entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeleteCurrentEntryRequest.entry)
}
inline ::Entry* DeleteCurrentEntryRequest::release_entry() {
  
  ::Entry* temp = entry_;
  entry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Entry* DeleteCurrentEntryRequest::unsafe_arena_release_entry() {
  // @@protoc_insertion_point(field_release:DeleteCurrentEntryRequest.entry)
  
  ::Entry* temp = entry_;
  entry_ = nullptr;
  return temp;
}
inline ::Entry* DeleteCurrentEntryRequest::_internal_mutable_entry() {
  
  if (entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::Entry>(GetArena());
    entry_ = p;
  }
  return entry_;
}
inline ::Entry* DeleteCurrentEntryRequest::mutable_entry() {
  // @@protoc_insertion_point(field_mutable:DeleteCurrentEntryRequest.entry)
  return _internal_mutable_entry();
}
inline void DeleteCurrentEntryRequest::set_allocated_entry(::Entry* entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete entry_;
  }
  if (entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entry);
    if (message_arena != submessage_arena) {
      entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entry, submessage_arena);
    }
    
  } else {
    
  }
  entry_ = entry;
  // @@protoc_insertion_point(field_set_allocated:DeleteCurrentEntryRequest.entry)
}

// -------------------------------------------------------------------

// DeleteCurrentEntryResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_2eproto
